
L073_MotorApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08003560  08003560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003720  08003720  00013720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08003728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000ac  20000004  0800372c  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  200000b0  0800372c  000200b0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c8ac  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ce8  00000000  00000000  0002c8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007f8  00000000  00000000  0002e5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000778  00000000  00000000  0002edb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003973  00000000  00000000  0002f530  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a44  00000000  00000000  00032ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000358e7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001b88  00000000  00000000  00035964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003548 	.word	0x08003548

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003548 	.word	0x08003548

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	1c08      	adds	r0, r1, #0
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	b083      	sub	sp, #12
 8000454:	000d      	movs	r5, r1
 8000456:	4692      	mov	sl, r2
 8000458:	4699      	mov	r9, r3
 800045a:	428b      	cmp	r3, r1
 800045c:	d82f      	bhi.n	80004be <__udivmoddi4+0x7a>
 800045e:	d02c      	beq.n	80004ba <__udivmoddi4+0x76>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ae 	bl	80005c4 <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8a9 	bl	80005c4 <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	469b      	mov	fp, r3
 800047a:	d500      	bpl.n	800047e <__udivmoddi4+0x3a>
 800047c:	e074      	b.n	8000568 <__udivmoddi4+0x124>
 800047e:	4653      	mov	r3, sl
 8000480:	465a      	mov	r2, fp
 8000482:	4093      	lsls	r3, r2
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4642      	mov	r2, r8
 800048a:	4093      	lsls	r3, r2
 800048c:	001e      	movs	r6, r3
 800048e:	42af      	cmp	r7, r5
 8000490:	d829      	bhi.n	80004e6 <__udivmoddi4+0xa2>
 8000492:	d026      	beq.n	80004e2 <__udivmoddi4+0x9e>
 8000494:	465b      	mov	r3, fp
 8000496:	1ba4      	subs	r4, r4, r6
 8000498:	41bd      	sbcs	r5, r7
 800049a:	2b00      	cmp	r3, #0
 800049c:	da00      	bge.n	80004a0 <__udivmoddi4+0x5c>
 800049e:	e079      	b.n	8000594 <__udivmoddi4+0x150>
 80004a0:	2200      	movs	r2, #0
 80004a2:	2300      	movs	r3, #0
 80004a4:	9200      	str	r2, [sp, #0]
 80004a6:	9301      	str	r3, [sp, #4]
 80004a8:	2301      	movs	r3, #1
 80004aa:	465a      	mov	r2, fp
 80004ac:	4093      	lsls	r3, r2
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	2301      	movs	r3, #1
 80004b2:	4642      	mov	r2, r8
 80004b4:	4093      	lsls	r3, r2
 80004b6:	9300      	str	r3, [sp, #0]
 80004b8:	e019      	b.n	80004ee <__udivmoddi4+0xaa>
 80004ba:	4282      	cmp	r2, r0
 80004bc:	d9d0      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004be:	2200      	movs	r2, #0
 80004c0:	2300      	movs	r3, #0
 80004c2:	9200      	str	r2, [sp, #0]
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <__udivmoddi4+0x8c>
 80004cc:	601c      	str	r4, [r3, #0]
 80004ce:	605d      	str	r5, [r3, #4]
 80004d0:	9800      	ldr	r0, [sp, #0]
 80004d2:	9901      	ldr	r1, [sp, #4]
 80004d4:	b003      	add	sp, #12
 80004d6:	bc3c      	pop	{r2, r3, r4, r5}
 80004d8:	4690      	mov	r8, r2
 80004da:	4699      	mov	r9, r3
 80004dc:	46a2      	mov	sl, r4
 80004de:	46ab      	mov	fp, r5
 80004e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e2:	42a3      	cmp	r3, r4
 80004e4:	d9d6      	bls.n	8000494 <__udivmoddi4+0x50>
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	4643      	mov	r3, r8
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d0e8      	beq.n	80004c6 <__udivmoddi4+0x82>
 80004f4:	07fb      	lsls	r3, r7, #31
 80004f6:	0872      	lsrs	r2, r6, #1
 80004f8:	431a      	orrs	r2, r3
 80004fa:	4646      	mov	r6, r8
 80004fc:	087b      	lsrs	r3, r7, #1
 80004fe:	e00e      	b.n	800051e <__udivmoddi4+0xda>
 8000500:	42ab      	cmp	r3, r5
 8000502:	d101      	bne.n	8000508 <__udivmoddi4+0xc4>
 8000504:	42a2      	cmp	r2, r4
 8000506:	d80c      	bhi.n	8000522 <__udivmoddi4+0xde>
 8000508:	1aa4      	subs	r4, r4, r2
 800050a:	419d      	sbcs	r5, r3
 800050c:	2001      	movs	r0, #1
 800050e:	1924      	adds	r4, r4, r4
 8000510:	416d      	adcs	r5, r5
 8000512:	2100      	movs	r1, #0
 8000514:	3e01      	subs	r6, #1
 8000516:	1824      	adds	r4, r4, r0
 8000518:	414d      	adcs	r5, r1
 800051a:	2e00      	cmp	r6, #0
 800051c:	d006      	beq.n	800052c <__udivmoddi4+0xe8>
 800051e:	42ab      	cmp	r3, r5
 8000520:	d9ee      	bls.n	8000500 <__udivmoddi4+0xbc>
 8000522:	3e01      	subs	r6, #1
 8000524:	1924      	adds	r4, r4, r4
 8000526:	416d      	adcs	r5, r5
 8000528:	2e00      	cmp	r6, #0
 800052a:	d1f8      	bne.n	800051e <__udivmoddi4+0xda>
 800052c:	465b      	mov	r3, fp
 800052e:	9800      	ldr	r0, [sp, #0]
 8000530:	9901      	ldr	r1, [sp, #4]
 8000532:	1900      	adds	r0, r0, r4
 8000534:	4169      	adcs	r1, r5
 8000536:	2b00      	cmp	r3, #0
 8000538:	db22      	blt.n	8000580 <__udivmoddi4+0x13c>
 800053a:	002b      	movs	r3, r5
 800053c:	465a      	mov	r2, fp
 800053e:	40d3      	lsrs	r3, r2
 8000540:	002a      	movs	r2, r5
 8000542:	4644      	mov	r4, r8
 8000544:	40e2      	lsrs	r2, r4
 8000546:	001c      	movs	r4, r3
 8000548:	465b      	mov	r3, fp
 800054a:	0015      	movs	r5, r2
 800054c:	2b00      	cmp	r3, #0
 800054e:	db2c      	blt.n	80005aa <__udivmoddi4+0x166>
 8000550:	0026      	movs	r6, r4
 8000552:	409e      	lsls	r6, r3
 8000554:	0033      	movs	r3, r6
 8000556:	0026      	movs	r6, r4
 8000558:	4647      	mov	r7, r8
 800055a:	40be      	lsls	r6, r7
 800055c:	0032      	movs	r2, r6
 800055e:	1a80      	subs	r0, r0, r2
 8000560:	4199      	sbcs	r1, r3
 8000562:	9000      	str	r0, [sp, #0]
 8000564:	9101      	str	r1, [sp, #4]
 8000566:	e7ae      	b.n	80004c6 <__udivmoddi4+0x82>
 8000568:	4642      	mov	r2, r8
 800056a:	2320      	movs	r3, #32
 800056c:	1a9b      	subs	r3, r3, r2
 800056e:	4652      	mov	r2, sl
 8000570:	40da      	lsrs	r2, r3
 8000572:	4641      	mov	r1, r8
 8000574:	0013      	movs	r3, r2
 8000576:	464a      	mov	r2, r9
 8000578:	408a      	lsls	r2, r1
 800057a:	0017      	movs	r7, r2
 800057c:	431f      	orrs	r7, r3
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x42>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	002a      	movs	r2, r5
 8000588:	4646      	mov	r6, r8
 800058a:	409a      	lsls	r2, r3
 800058c:	0023      	movs	r3, r4
 800058e:	40f3      	lsrs	r3, r6
 8000590:	4313      	orrs	r3, r2
 8000592:	e7d5      	b.n	8000540 <__udivmoddi4+0xfc>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	2100      	movs	r1, #0
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	2200      	movs	r2, #0
 800059e:	9100      	str	r1, [sp, #0]
 80005a0:	9201      	str	r2, [sp, #4]
 80005a2:	2201      	movs	r2, #1
 80005a4:	40da      	lsrs	r2, r3
 80005a6:	9201      	str	r2, [sp, #4]
 80005a8:	e782      	b.n	80004b0 <__udivmoddi4+0x6c>
 80005aa:	4642      	mov	r2, r8
 80005ac:	2320      	movs	r3, #32
 80005ae:	0026      	movs	r6, r4
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	40de      	lsrs	r6, r3
 80005b4:	002f      	movs	r7, r5
 80005b6:	46b4      	mov	ip, r6
 80005b8:	4097      	lsls	r7, r2
 80005ba:	4666      	mov	r6, ip
 80005bc:	003b      	movs	r3, r7
 80005be:	4333      	orrs	r3, r6
 80005c0:	e7c9      	b.n	8000556 <__udivmoddi4+0x112>
 80005c2:	46c0      	nop			; (mov r8, r8)

080005c4 <__clzdi2>:
 80005c4:	b510      	push	{r4, lr}
 80005c6:	2900      	cmp	r1, #0
 80005c8:	d103      	bne.n	80005d2 <__clzdi2+0xe>
 80005ca:	f000 f807 	bl	80005dc <__clzsi2>
 80005ce:	3020      	adds	r0, #32
 80005d0:	e002      	b.n	80005d8 <__clzdi2+0x14>
 80005d2:	1c08      	adds	r0, r1, #0
 80005d4:	f000 f802 	bl	80005dc <__clzsi2>
 80005d8:	bd10      	pop	{r4, pc}
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzsi2>:
 80005dc:	211c      	movs	r1, #28
 80005de:	2301      	movs	r3, #1
 80005e0:	041b      	lsls	r3, r3, #16
 80005e2:	4298      	cmp	r0, r3
 80005e4:	d301      	bcc.n	80005ea <__clzsi2+0xe>
 80005e6:	0c00      	lsrs	r0, r0, #16
 80005e8:	3910      	subs	r1, #16
 80005ea:	0a1b      	lsrs	r3, r3, #8
 80005ec:	4298      	cmp	r0, r3
 80005ee:	d301      	bcc.n	80005f4 <__clzsi2+0x18>
 80005f0:	0a00      	lsrs	r0, r0, #8
 80005f2:	3908      	subs	r1, #8
 80005f4:	091b      	lsrs	r3, r3, #4
 80005f6:	4298      	cmp	r0, r3
 80005f8:	d301      	bcc.n	80005fe <__clzsi2+0x22>
 80005fa:	0900      	lsrs	r0, r0, #4
 80005fc:	3904      	subs	r1, #4
 80005fe:	a202      	add	r2, pc, #8	; (adr r2, 8000608 <__clzsi2+0x2c>)
 8000600:	5c10      	ldrb	r0, [r2, r0]
 8000602:	1840      	adds	r0, r0, r1
 8000604:	4770      	bx	lr
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	02020304 	.word	0x02020304
 800060c:	01010101 	.word	0x01010101
	...

08000618 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <HAL_Init+0x24>)
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_Init+0x24>)
 8000620:	6812      	ldr	r2, [r2, #0]
 8000622:	2102      	movs	r1, #2
 8000624:	430a      	orrs	r2, r1
 8000626:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 f80f 	bl	800064c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800062e:	f000 f807 	bl	8000640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	0018      	movs	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <HAL_InitTick+0x38>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	23fa      	movs	r3, #250	; 0xfa
 800065a:	0099      	lsls	r1, r3, #2
 800065c:	0010      	movs	r0, r2
 800065e:	f7ff fd5b 	bl	8000118 <__udivsi3>
 8000662:	0003      	movs	r3, r0
 8000664:	0018      	movs	r0, r3
 8000666:	f000 f8e5 	bl	8000834 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	2200      	movs	r2, #0
 8000672:	0018      	movs	r0, r3
 8000674:	f000 f8c8 	bl	8000808 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	0018      	movs	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	20000000 	.word	0x20000000

08000688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  uwTick++;
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <HAL_IncTick+0x14>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	4b02      	ldr	r3, [pc, #8]	; (800069c <HAL_IncTick+0x14>)
 8000694:	601a      	str	r2, [r3, #0]
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000028 	.word	0x20000028

080006a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <HAL_GetTick+0x10>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	20000028 	.word	0x20000028

080006b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 80006c0:	f7ff ffee 	bl	80006a0 <HAL_GetTick>
 80006c4:	0003      	movs	r3, r0
 80006c6:	60fb      	str	r3, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	f7ff ffe9 	bl	80006a0 <HAL_GetTick>
 80006ce:	0002      	movs	r2, r0
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	1ad2      	subs	r2, r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d3f7      	bcc.n	80006ca <HAL_Delay+0x16>
  {
  }
}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b004      	add	sp, #16
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	0002      	movs	r2, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b7f      	cmp	r3, #127	; 0x7f
 80006f8:	d828      	bhi.n	800074c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006fa:	4c2f      	ldr	r4, [pc, #188]	; (80007b8 <__NVIC_SetPriority+0xd4>)
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b25b      	sxtb	r3, r3
 8000702:	089b      	lsrs	r3, r3, #2
 8000704:	492c      	ldr	r1, [pc, #176]	; (80007b8 <__NVIC_SetPriority+0xd4>)
 8000706:	1dfa      	adds	r2, r7, #7
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	b252      	sxtb	r2, r2
 800070c:	0892      	lsrs	r2, r2, #2
 800070e:	32c0      	adds	r2, #192	; 0xc0
 8000710:	0092      	lsls	r2, r2, #2
 8000712:	5852      	ldr	r2, [r2, r1]
 8000714:	1df9      	adds	r1, r7, #7
 8000716:	7809      	ldrb	r1, [r1, #0]
 8000718:	0008      	movs	r0, r1
 800071a:	2103      	movs	r1, #3
 800071c:	4001      	ands	r1, r0
 800071e:	00c9      	lsls	r1, r1, #3
 8000720:	20ff      	movs	r0, #255	; 0xff
 8000722:	4088      	lsls	r0, r1
 8000724:	0001      	movs	r1, r0
 8000726:	43c9      	mvns	r1, r1
 8000728:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	0192      	lsls	r2, r2, #6
 800072e:	20ff      	movs	r0, #255	; 0xff
 8000730:	4010      	ands	r0, r2
 8000732:	1dfa      	adds	r2, r7, #7
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	0015      	movs	r5, r2
 8000738:	2203      	movs	r2, #3
 800073a:	402a      	ands	r2, r5
 800073c:	00d2      	lsls	r2, r2, #3
 800073e:	4090      	lsls	r0, r2
 8000740:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000742:	430a      	orrs	r2, r1
 8000744:	33c0      	adds	r3, #192	; 0xc0
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800074a:	e031      	b.n	80007b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800074c:	4c1b      	ldr	r4, [pc, #108]	; (80007bc <__NVIC_SetPriority+0xd8>)
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	001a      	movs	r2, r3
 8000754:	230f      	movs	r3, #15
 8000756:	4013      	ands	r3, r2
 8000758:	3b08      	subs	r3, #8
 800075a:	0899      	lsrs	r1, r3, #2
 800075c:	4a17      	ldr	r2, [pc, #92]	; (80007bc <__NVIC_SetPriority+0xd8>)
 800075e:	1dfb      	adds	r3, r7, #7
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	0018      	movs	r0, r3
 8000764:	230f      	movs	r3, #15
 8000766:	4003      	ands	r3, r0
 8000768:	3b08      	subs	r3, #8
 800076a:	089b      	lsrs	r3, r3, #2
 800076c:	3306      	adds	r3, #6
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	18d3      	adds	r3, r2, r3
 8000772:	3304      	adds	r3, #4
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	1dfa      	adds	r2, r7, #7
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	0010      	movs	r0, r2
 800077c:	2203      	movs	r2, #3
 800077e:	4002      	ands	r2, r0
 8000780:	00d2      	lsls	r2, r2, #3
 8000782:	20ff      	movs	r0, #255	; 0xff
 8000784:	4090      	lsls	r0, r2
 8000786:	0002      	movs	r2, r0
 8000788:	43d2      	mvns	r2, r2
 800078a:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	019b      	lsls	r3, r3, #6
 8000790:	20ff      	movs	r0, #255	; 0xff
 8000792:	4018      	ands	r0, r3
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	001d      	movs	r5, r3
 800079a:	2303      	movs	r3, #3
 800079c:	402b      	ands	r3, r5
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	4098      	lsls	r0, r3
 80007a2:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007a4:	431a      	orrs	r2, r3
 80007a6:	1d8b      	adds	r3, r1, #6
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	18e3      	adds	r3, r4, r3
 80007ac:	3304      	adds	r3, #4
 80007ae:	601a      	str	r2, [r3, #0]
}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b002      	add	sp, #8
 80007b6:	bdb0      	pop	{r4, r5, r7, pc}
 80007b8:	e000e100 	.word	0xe000e100
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3b01      	subs	r3, #1
 80007cc:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <SysTick_Config+0x40>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d901      	bls.n	80007d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d2:	2301      	movs	r3, #1
 80007d4:	e010      	b.n	80007f8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <SysTick_Config+0x44>)
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	3a01      	subs	r2, #1
 80007dc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007de:	2301      	movs	r3, #1
 80007e0:	425b      	negs	r3, r3
 80007e2:	2103      	movs	r1, #3
 80007e4:	0018      	movs	r0, r3
 80007e6:	f7ff ff7d 	bl	80006e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <SysTick_Config+0x44>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <SysTick_Config+0x44>)
 80007f2:	2207      	movs	r2, #7
 80007f4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b002      	add	sp, #8
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	00ffffff 	.word	0x00ffffff
 8000804:	e000e010 	.word	0xe000e010

08000808 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	230f      	movs	r3, #15
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	1c02      	adds	r2, r0, #0
 8000818:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	230f      	movs	r3, #15
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b25b      	sxtb	r3, r3
 8000824:	0011      	movs	r1, r2
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff ff5c 	bl	80006e4 <__NVIC_SetPriority>
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b004      	add	sp, #16
 8000832:	bd80      	pop	{r7, pc}

08000834 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	0018      	movs	r0, r3
 8000840:	f7ff ffbe 	bl	80007c0 <SysTick_Config>
 8000844:	0003      	movs	r3, r0
}
 8000846:	0018      	movs	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d101      	bne.n	8000860 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	e015      	b.n	800088c <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d106      	bne.n	8000878 <HAL_DAC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	0018      	movs	r0, r3
 8000874:	f002 fa46 	bl	8002d04 <HAL_DAC_MspInit>
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2202      	movs	r2, #2
 800087c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	b002      	add	sp, #8
 8000892:	bd80      	pop	{r7, pc}

08000894 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	60f8      	str	r0, [r7, #12]
 800089c:	60b9      	str	r1, [r7, #8]
 800089e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	795b      	ldrb	r3, [r3, #5]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d101      	bne.n	80008b4 <HAL_DAC_ConfigChannel+0x20>
 80008b0:	2302      	movs	r3, #2
 80008b2:	e035      	b.n	8000920 <HAL_DAC_ConfigChannel+0x8c>
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2201      	movs	r2, #1
 80008b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2202      	movs	r2, #2
 80008be:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80008c8:	4a17      	ldr	r2, [pc, #92]	; (8000928 <HAL_DAC_ConfigChannel+0x94>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	409a      	lsls	r2, r3
 80008ce:	0013      	movs	r3, r2
 80008d0:	43da      	mvns	r2, r3
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	4013      	ands	r3, r2
 80008d6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	409a      	lsls	r2, r3
 80008ea:	0013      	movs	r3, r2
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	6812      	ldr	r2, [r2, #0]
 8000904:	20c0      	movs	r0, #192	; 0xc0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	4088      	lsls	r0, r1
 800090a:	0001      	movs	r1, r0
 800090c:	43c9      	mvns	r1, r1
 800090e:	400a      	ands	r2, r1
 8000910:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2201      	movs	r2, #1
 8000916:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2200      	movs	r2, #0
 800091c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
}
 8000920:	0018      	movs	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	b006      	add	sp, #24
 8000926:	bd80      	pop	{r7, pc}
 8000928:	00000ffe 	.word	0x00000ffe

0800092c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	795b      	ldrb	r3, [r3, #5]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d101      	bne.n	800094a <HAL_DAC_Start+0x1e>
 8000946:	2302      	movs	r3, #2
 8000948:	e055      	b.n	80009f6 <HAL_DAC_Start+0xca>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2202      	movs	r2, #2
 8000954:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	6812      	ldr	r2, [r2, #0]
 800095e:	6811      	ldr	r1, [r2, #0]
 8000960:	2001      	movs	r0, #1
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	4090      	lsls	r0, r2
 8000966:	0002      	movs	r2, r0
 8000968:	430a      	orrs	r2, r1
 800096a:	601a      	str	r2, [r3, #0]

  if(Channel == DAC_CHANNEL_1)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d11a      	bne.n	80009a8 <HAL_DAC_Start+0x7c>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2204      	movs	r2, #4
 800097a:	4013      	ands	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2238      	movs	r2, #56	; 0x38
 8000986:	4013      	ands	r3, r2
 8000988:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	2b04      	cmp	r3, #4
 800098e:	d12b      	bne.n	80009e8 <HAL_DAC_Start+0xbc>
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	2b38      	cmp	r3, #56	; 0x38
 8000994:	d128      	bne.n	80009e8 <HAL_DAC_Start+0xbc>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	6812      	ldr	r2, [r2, #0]
 800099e:	6852      	ldr	r2, [r2, #4]
 80009a0:	2101      	movs	r1, #1
 80009a2:	430a      	orrs	r2, r1
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	e01f      	b.n	80009e8 <HAL_DAC_Start+0xbc>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	02db      	lsls	r3, r3, #11
 80009b2:	4013      	ands	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	23e0      	movs	r3, #224	; 0xe0
 80009be:	039b      	lsls	r3, r3, #14
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	02db      	lsls	r3, r3, #11
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d10c      	bne.n	80009e8 <HAL_DAC_Start+0xbc>
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	23e0      	movs	r3, #224	; 0xe0
 80009d2:	039b      	lsls	r3, r3, #14
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d107      	bne.n	80009e8 <HAL_DAC_Start+0xbc>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	6812      	ldr	r2, [r2, #0]
 80009e0:	6852      	ldr	r2, [r2, #4]
 80009e2:	2102      	movs	r1, #2
 80009e4:	430a      	orrs	r2, r1
 80009e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2201      	movs	r2, #1
 80009ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	0018      	movs	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b004      	add	sp, #16
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	60f8      	str	r0, [r7, #12]
 8000a06:	60b9      	str	r1, [r7, #8]
 8000a08:	607a      	str	r2, [r7, #4]
 8000a0a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance; 
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d105      	bne.n	8000a28 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNEMENT(Alignment);
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	18d3      	adds	r3, r2, r3
 8000a22:	3308      	adds	r3, #8
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	e004      	b.n	8000a32 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNEMENT(Alignment);
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	18d3      	adds	r3, r2, r3
 8000a2e:	3314      	adds	r3, #20
 8000a30:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	683a      	ldr	r2, [r7, #0]
 8000a36:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b006      	add	sp, #24
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a5a:	e155      	b.n	8000d08 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2101      	movs	r1, #1
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	4091      	lsls	r1, r2
 8000a66:	000a      	movs	r2, r1
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d100      	bne.n	8000a74 <HAL_GPIO_Init+0x30>
 8000a72:	e146      	b.n	8000d02 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0x40>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b12      	cmp	r3, #18
 8000a82:	d123      	bne.n	8000acc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	08da      	lsrs	r2, r3, #3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3208      	adds	r2, #8
 8000a8c:	0092      	lsls	r2, r2, #2
 8000a8e:	58d3      	ldr	r3, [r2, r3]
 8000a90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	2207      	movs	r2, #7
 8000a96:	4013      	ands	r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	43da      	mvns	r2, r3
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	691a      	ldr	r2, [r3, #16]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	2107      	movs	r1, #7
 8000ab0:	400b      	ands	r3, r1
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	409a      	lsls	r2, r3
 8000ab6:	0013      	movs	r3, r2
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	08da      	lsrs	r2, r3, #3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3208      	adds	r2, #8
 8000ac6:	0092      	lsls	r2, r2, #2
 8000ac8:	6939      	ldr	r1, [r7, #16]
 8000aca:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d00b      	beq.n	8000aec <HAL_GPIO_Init+0xa8>
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d007      	beq.n	8000aec <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae0:	2b11      	cmp	r3, #17
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b12      	cmp	r3, #18
 8000aea:	d130      	bne.n	8000b4e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	2203      	movs	r2, #3
 8000af8:	409a      	lsls	r2, r3
 8000afa:	0013      	movs	r3, r2
 8000afc:	43da      	mvns	r2, r3
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	0013      	movs	r3, r2
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b22:	2201      	movs	r2, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	091b      	lsrs	r3, r3, #4
 8000b38:	2201      	movs	r2, #1
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	2203      	movs	r2, #3
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	43da      	mvns	r2, r3
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	055b      	lsls	r3, r3, #21
 8000bba:	4013      	ands	r3, r2
 8000bbc:	d100      	bne.n	8000bc0 <HAL_GPIO_Init+0x17c>
 8000bbe:	e0a0      	b.n	8000d02 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc0:	4b57      	ldr	r3, [pc, #348]	; (8000d20 <HAL_GPIO_Init+0x2dc>)
 8000bc2:	4a57      	ldr	r2, [pc, #348]	; (8000d20 <HAL_GPIO_Init+0x2dc>)
 8000bc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bcc:	4a55      	ldr	r2, [pc, #340]	; (8000d24 <HAL_GPIO_Init+0x2e0>)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	589b      	ldr	r3, [r3, r2]
 8000bd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	2203      	movs	r2, #3
 8000bde:	4013      	ands	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	220f      	movs	r2, #15
 8000be4:	409a      	lsls	r2, r3
 8000be6:	0013      	movs	r3, r2
 8000be8:	43da      	mvns	r2, r3
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	23a0      	movs	r3, #160	; 0xa0
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d01f      	beq.n	8000c3a <HAL_GPIO_Init+0x1f6>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a4a      	ldr	r2, [pc, #296]	; (8000d28 <HAL_GPIO_Init+0x2e4>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d019      	beq.n	8000c36 <HAL_GPIO_Init+0x1f2>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a49      	ldr	r2, [pc, #292]	; (8000d2c <HAL_GPIO_Init+0x2e8>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d013      	beq.n	8000c32 <HAL_GPIO_Init+0x1ee>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a48      	ldr	r2, [pc, #288]	; (8000d30 <HAL_GPIO_Init+0x2ec>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d00d      	beq.n	8000c2e <HAL_GPIO_Init+0x1ea>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a47      	ldr	r2, [pc, #284]	; (8000d34 <HAL_GPIO_Init+0x2f0>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d007      	beq.n	8000c2a <HAL_GPIO_Init+0x1e6>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a46      	ldr	r2, [pc, #280]	; (8000d38 <HAL_GPIO_Init+0x2f4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d101      	bne.n	8000c26 <HAL_GPIO_Init+0x1e2>
 8000c22:	2305      	movs	r3, #5
 8000c24:	e00a      	b.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c26:	2306      	movs	r3, #6
 8000c28:	e008      	b.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c2e:	2303      	movs	r3, #3
 8000c30:	e004      	b.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c32:	2302      	movs	r3, #2
 8000c34:	e002      	b.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c36:	2301      	movs	r3, #1
 8000c38:	e000      	b.n	8000c3c <HAL_GPIO_Init+0x1f8>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	2103      	movs	r1, #3
 8000c40:	400a      	ands	r2, r1
 8000c42:	0092      	lsls	r2, r2, #2
 8000c44:	4093      	lsls	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c4c:	4935      	ldr	r1, [pc, #212]	; (8000d24 <HAL_GPIO_Init+0x2e0>)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	3302      	adds	r3, #2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c5a:	4b38      	ldr	r3, [pc, #224]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	43da      	mvns	r2, r3
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	025b      	lsls	r3, r3, #9
 8000c72:	4013      	ands	r3, r2
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c7e:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c84:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	43da      	mvns	r2, r3
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	029b      	lsls	r3, r3, #10
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	d003      	beq.n	8000ca8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	035b      	lsls	r3, r3, #13
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	d003      	beq.n	8000cd2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	43da      	mvns	r2, r3
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	039b      	lsls	r3, r3, #14
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	d003      	beq.n	8000cfc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_GPIO_Init+0x2f8>)
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	40da      	lsrs	r2, r3
 8000d10:	1e13      	subs	r3, r2, #0
 8000d12:	d000      	beq.n	8000d16 <HAL_GPIO_Init+0x2d2>
 8000d14:	e6a2      	b.n	8000a5c <HAL_GPIO_Init+0x18>
  }
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b006      	add	sp, #24
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000
 8000d28:	50000400 	.word	0x50000400
 8000d2c:	50000800 	.word	0x50000800
 8000d30:	50000c00 	.word	0x50000c00
 8000d34:	50001000 	.word	0x50001000
 8000d38:	50001c00 	.word	0x50001c00
 8000d3c:	40010400 	.word	0x40010400

08000d40 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	0008      	movs	r0, r1
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	1cbb      	adds	r3, r7, #2
 8000d4e:	1c02      	adds	r2, r0, #0
 8000d50:	801a      	strh	r2, [r3, #0]
 8000d52:	1c7b      	adds	r3, r7, #1
 8000d54:	1c0a      	adds	r2, r1, #0
 8000d56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000d58:	1c7b      	adds	r3, r7, #1
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d004      	beq.n	8000d6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d60:	1cbb      	adds	r3, r7, #2
 8000d62:	881a      	ldrh	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000d68:	e003      	b.n	8000d72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000d6a:	1cbb      	adds	r3, r7, #2
 8000d6c:	881a      	ldrh	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4013      	ands	r3, r2
 8000d90:	d100      	bne.n	8000d94 <HAL_RCC_OscConfig+0x18>
 8000d92:	e087      	b.n	8000ea4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d94:	4bc0      	ldr	r3, [pc, #768]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	220c      	movs	r2, #12
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b08      	cmp	r3, #8
 8000d9e:	d00e      	beq.n	8000dbe <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da0:	4bbd      	ldr	r3, [pc, #756]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	220c      	movs	r2, #12
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b0c      	cmp	r3, #12
 8000daa:	d116      	bne.n	8000dda <HAL_RCC_OscConfig+0x5e>
 8000dac:	4bba      	ldr	r3, [pc, #744]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	025b      	lsls	r3, r3, #9
 8000db4:	401a      	ands	r2, r3
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	025b      	lsls	r3, r3, #9
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d10d      	bne.n	8000dda <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dbe:	4bb6      	ldr	r3, [pc, #728]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	029b      	lsls	r3, r3, #10
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d100      	bne.n	8000dcc <HAL_RCC_OscConfig+0x50>
 8000dca:	e06a      	b.n	8000ea2 <HAL_RCC_OscConfig+0x126>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d166      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	f000 fb69 	bl	80014ac <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	025b      	lsls	r3, r3, #9
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d107      	bne.n	8000df6 <HAL_RCC_OscConfig+0x7a>
 8000de6:	4bac      	ldr	r3, [pc, #688]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000de8:	4aab      	ldr	r2, [pc, #684]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	0249      	lsls	r1, r1, #9
 8000df0:	430a      	orrs	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	e027      	b.n	8000e46 <HAL_RCC_OscConfig+0xca>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	23a0      	movs	r3, #160	; 0xa0
 8000dfc:	02db      	lsls	r3, r3, #11
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d10e      	bne.n	8000e20 <HAL_RCC_OscConfig+0xa4>
 8000e02:	4ba5      	ldr	r3, [pc, #660]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000e04:	4aa4      	ldr	r2, [pc, #656]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000e06:	6812      	ldr	r2, [r2, #0]
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	02c9      	lsls	r1, r1, #11
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	4ba1      	ldr	r3, [pc, #644]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000e12:	4aa1      	ldr	r2, [pc, #644]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	0249      	lsls	r1, r1, #9
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e012      	b.n	8000e46 <HAL_RCC_OscConfig+0xca>
 8000e20:	4b9d      	ldr	r3, [pc, #628]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000e22:	4a9d      	ldr	r2, [pc, #628]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000e24:	6812      	ldr	r2, [r2, #0]
 8000e26:	499d      	ldr	r1, [pc, #628]	; (800109c <HAL_RCC_OscConfig+0x320>)
 8000e28:	400a      	ands	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	4b9a      	ldr	r3, [pc, #616]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	025b      	lsls	r3, r3, #9
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4b97      	ldr	r3, [pc, #604]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000e3c:	4a96      	ldr	r2, [pc, #600]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	4997      	ldr	r1, [pc, #604]	; (80010a0 <HAL_RCC_OscConfig+0x324>)
 8000e42:	400a      	ands	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d014      	beq.n	8000e78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fc27 	bl	80006a0 <HAL_GetTick>
 8000e52:	0003      	movs	r3, r0
 8000e54:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e58:	f7ff fc22 	bl	80006a0 <HAL_GetTick>
 8000e5c:	0002      	movs	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b64      	cmp	r3, #100	; 0x64
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e320      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6a:	4b8b      	ldr	r3, [pc, #556]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	029b      	lsls	r3, r3, #10
 8000e72:	4013      	ands	r3, r2
 8000e74:	d0f0      	beq.n	8000e58 <HAL_RCC_OscConfig+0xdc>
 8000e76:	e015      	b.n	8000ea4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e78:	f7ff fc12 	bl	80006a0 <HAL_GetTick>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e80:	e008      	b.n	8000e94 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e82:	f7ff fc0d 	bl	80006a0 <HAL_GetTick>
 8000e86:	0002      	movs	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b64      	cmp	r3, #100	; 0x64
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e30b      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e94:	4b80      	ldr	r3, [pc, #512]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	029b      	lsls	r3, r3, #10
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d1f0      	bne.n	8000e82 <HAL_RCC_OscConfig+0x106>
 8000ea0:	e000      	b.n	8000ea4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	4013      	ands	r3, r2
 8000eac:	d100      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x134>
 8000eae:	e06c      	b.n	8000f8a <HAL_RCC_OscConfig+0x20e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eb0:	4b79      	ldr	r3, [pc, #484]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	220c      	movs	r2, #12
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d00b      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ebc:	4b76      	ldr	r3, [pc, #472]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b0c      	cmp	r3, #12
 8000ec6:	d11b      	bne.n	8000f00 <HAL_RCC_OscConfig+0x184>
 8000ec8:	4b73      	ldr	r3, [pc, #460]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	025b      	lsls	r3, r3, #9
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d115      	bne.n	8000f00 <HAL_RCC_OscConfig+0x184>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed4:	4b70      	ldr	r3, [pc, #448]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2204      	movs	r2, #4
 8000eda:	4013      	ands	r3, r2
 8000edc:	d005      	beq.n	8000eea <HAL_RCC_OscConfig+0x16e>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d001      	beq.n	8000eea <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e2e0      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eea:	4a6b      	ldr	r2, [pc, #428]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000eec:	4b6a      	ldr	r3, [pc, #424]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	496c      	ldr	r1, [pc, #432]	; (80010a4 <HAL_RCC_OscConfig+0x328>)
 8000ef2:	4019      	ands	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	430b      	orrs	r3, r1
 8000efc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efe:	e044      	b.n	8000f8a <HAL_RCC_OscConfig+0x20e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d027      	beq.n	8000f58 <HAL_RCC_OscConfig+0x1dc>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000f08:	4a63      	ldr	r2, [pc, #396]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000f0a:	4b63      	ldr	r3, [pc, #396]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2109      	movs	r1, #9
 8000f10:	438b      	bics	r3, r1
 8000f12:	0019      	movs	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fbc0 	bl	80006a0 <HAL_GetTick>
 8000f20:	0003      	movs	r3, r0
 8000f22:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x1bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f26:	f7ff fbbb 	bl	80006a0 <HAL_GetTick>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x1bc>
          {
            return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e2b9      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f38:	4b57      	ldr	r3, [pc, #348]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d0f1      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1aa>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f42:	4a55      	ldr	r2, [pc, #340]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000f44:	4b54      	ldr	r3, [pc, #336]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	4956      	ldr	r1, [pc, #344]	; (80010a4 <HAL_RCC_OscConfig+0x328>)
 8000f4a:	4019      	ands	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	430b      	orrs	r3, r1
 8000f54:	6053      	str	r3, [r2, #4]
 8000f56:	e018      	b.n	8000f8a <HAL_RCC_OscConfig+0x20e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f58:	4b4f      	ldr	r3, [pc, #316]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000f5a:	4a4f      	ldr	r2, [pc, #316]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000f5c:	6812      	ldr	r2, [r2, #0]
 8000f5e:	2101      	movs	r1, #1
 8000f60:	438a      	bics	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f64:	f7ff fb9c 	bl	80006a0 <HAL_GetTick>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f6e:	f7ff fb97 	bl	80006a0 <HAL_GetTick>
 8000f72:	0002      	movs	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e295      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f80:	4b45      	ldr	r3, [pc, #276]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2204      	movs	r2, #4
 8000f86:	4013      	ands	r3, r2
 8000f88:	d1f1      	bne.n	8000f6e <HAL_RCC_OscConfig+0x1f2>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2210      	movs	r2, #16
 8000f90:	4013      	ands	r3, r2
 8000f92:	d100      	bne.n	8000f96 <HAL_RCC_OscConfig+0x21a>
 8000f94:	e0c2      	b.n	800111c <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000f96:	4b40      	ldr	r3, [pc, #256]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d162      	bne.n	8001066 <HAL_RCC_OscConfig+0x2ea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fa0:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d005      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x23c>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x23c>
      {
        return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e279      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000fbe:	6859      	ldr	r1, [r3, #4]
 8000fc0:	23e0      	movs	r3, #224	; 0xe0
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d91c      	bls.n	8001004 <HAL_RCC_OscConfig+0x288>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 fc44 	bl	800185c <RCC_SetFlashLatencyFromMSIRange>
 8000fd4:	1e03      	subs	r3, r0, #0
 8000fd6:	d001      	beq.n	8000fdc <HAL_RCC_OscConfig+0x260>
          {
            return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e267      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fdc:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	4931      	ldr	r1, [pc, #196]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 8000fe4:	4019      	ands	r1, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	430b      	orrs	r3, r1
 8000fec:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fee:	4a2a      	ldr	r2, [pc, #168]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	0a19      	lsrs	r1, r3, #8
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	061b      	lsls	r3, r3, #24
 8000ffe:	430b      	orrs	r3, r1
 8001000:	6053      	str	r3, [r2, #4]
 8001002:	e01b      	b.n	800103c <HAL_RCC_OscConfig+0x2c0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001004:	4a24      	ldr	r2, [pc, #144]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	4927      	ldr	r1, [pc, #156]	; (80010a8 <HAL_RCC_OscConfig+0x32c>)
 800100c:	4019      	ands	r1, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	430b      	orrs	r3, r1
 8001014:	6053      	str	r3, [r2, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001016:	4a20      	ldr	r2, [pc, #128]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	0a19      	lsrs	r1, r3, #8
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	061b      	lsls	r3, r3, #24
 8001026:	430b      	orrs	r3, r1
 8001028:	6053      	str	r3, [r2, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	0018      	movs	r0, r3
 8001030:	f000 fc14 	bl	800185c <RCC_SetFlashLatencyFromMSIRange>
 8001034:	1e03      	subs	r3, r0, #0
 8001036:	d001      	beq.n	800103c <HAL_RCC_OscConfig+0x2c0>
          {
            return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e237      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	0b5b      	lsrs	r3, r3, #13
 8001042:	3301      	adds	r3, #1
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	0212      	lsls	r2, r2, #8
 8001048:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	210f      	movs	r1, #15
 8001052:	400b      	ands	r3, r1
 8001054:	4915      	ldr	r1, [pc, #84]	; (80010ac <HAL_RCC_OscConfig+0x330>)
 8001056:	5ccb      	ldrb	r3, [r1, r3]
 8001058:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_RCC_OscConfig+0x334>)
 800105c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 800105e:	2003      	movs	r0, #3
 8001060:	f7ff faf4 	bl	800064c <HAL_InitTick>
 8001064:	e05a      	b.n	800111c <HAL_RCC_OscConfig+0x3a0>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d03c      	beq.n	80010e8 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8001070:	4a09      	ldr	r2, [pc, #36]	; (8001098 <HAL_RCC_OscConfig+0x31c>)
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	0049      	lsls	r1, r1, #1
 8001078:	430a      	orrs	r2, r1
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fb10 	bl	80006a0 <HAL_GetTick>
 8001080:	0003      	movs	r3, r0
 8001082:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001084:	e016      	b.n	80010b4 <HAL_RCC_OscConfig+0x338>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001086:	f7ff fb0b 	bl	80006a0 <HAL_GetTick>
 800108a:	0002      	movs	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d90f      	bls.n	80010b4 <HAL_RCC_OscConfig+0x338>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e209      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
 8001098:	40021000 	.word	0x40021000
 800109c:	fffeffff 	.word	0xfffeffff
 80010a0:	fffbffff 	.word	0xfffbffff
 80010a4:	ffffe0ff 	.word	0xffffe0ff
 80010a8:	ffff1fff 	.word	0xffff1fff
 80010ac:	08003670 	.word	0x08003670
 80010b0:	20000000 	.word	0x20000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80010b4:	4bc7      	ldr	r3, [pc, #796]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4013      	ands	r3, r2
 80010be:	d0e2      	beq.n	8001086 <HAL_RCC_OscConfig+0x30a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010c0:	4ac4      	ldr	r2, [pc, #784]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80010c2:	4bc4      	ldr	r3, [pc, #784]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	49c4      	ldr	r1, [pc, #784]	; (80013d8 <HAL_RCC_OscConfig+0x65c>)
 80010c8:	4019      	ands	r1, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	430b      	orrs	r3, r1
 80010d0:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010d2:	4ac0      	ldr	r2, [pc, #768]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80010d4:	4bbf      	ldr	r3, [pc, #764]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	0a19      	lsrs	r1, r3, #8
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	061b      	lsls	r3, r3, #24
 80010e2:	430b      	orrs	r3, r1
 80010e4:	6053      	str	r3, [r2, #4]
 80010e6:	e019      	b.n	800111c <HAL_RCC_OscConfig+0x3a0>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010e8:	4bba      	ldr	r3, [pc, #744]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80010ea:	4aba      	ldr	r2, [pc, #744]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	49bb      	ldr	r1, [pc, #748]	; (80013dc <HAL_RCC_OscConfig+0x660>)
 80010f0:	400a      	ands	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fad4 	bl	80006a0 <HAL_GetTick>
 80010f8:	0003      	movs	r3, r0
 80010fa:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010fe:	f7ff facf 	bl	80006a0 <HAL_GetTick>
 8001102:	0002      	movs	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e1cd      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8001110:	4bb0      	ldr	r3, [pc, #704]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4013      	ands	r3, r2
 800111a:	d1f0      	bne.n	80010fe <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }  
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2208      	movs	r2, #8
 8001122:	4013      	ands	r3, r2
 8001124:	d036      	beq.n	8001194 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d019      	beq.n	8001162 <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800112e:	4ba9      	ldr	r3, [pc, #676]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001130:	4aa8      	ldr	r2, [pc, #672]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001132:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001134:	2101      	movs	r1, #1
 8001136:	430a      	orrs	r2, r1
 8001138:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113a:	f7ff fab1 	bl	80006a0 <HAL_GetTick>
 800113e:	0003      	movs	r3, r0
 8001140:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff faac 	bl	80006a0 <HAL_GetTick>
 8001148:	0002      	movs	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e1aa      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001156:	4b9f      	ldr	r3, [pc, #636]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800115a:	2202      	movs	r2, #2
 800115c:	4013      	ands	r3, r2
 800115e:	d0f1      	beq.n	8001144 <HAL_RCC_OscConfig+0x3c8>
 8001160:	e018      	b.n	8001194 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001162:	4b9c      	ldr	r3, [pc, #624]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001164:	4a9b      	ldr	r2, [pc, #620]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001166:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001168:	2101      	movs	r1, #1
 800116a:	438a      	bics	r2, r1
 800116c:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116e:	f7ff fa97 	bl	80006a0 <HAL_GetTick>
 8001172:	0003      	movs	r3, r0
 8001174:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001178:	f7ff fa92 	bl	80006a0 <HAL_GetTick>
 800117c:	0002      	movs	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e190      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118a:	4b92      	ldr	r3, [pc, #584]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 800118c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800118e:	2202      	movs	r2, #2
 8001190:	4013      	ands	r3, r2
 8001192:	d1f1      	bne.n	8001178 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2204      	movs	r2, #4
 800119a:	4013      	ands	r3, r2
 800119c:	d100      	bne.n	80011a0 <HAL_RCC_OscConfig+0x424>
 800119e:	e0af      	b.n	8001300 <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a0:	2317      	movs	r3, #23
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011a8:	4b8a      	ldr	r3, [pc, #552]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80011aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	055b      	lsls	r3, r3, #21
 80011b0:	4013      	ands	r3, r2
 80011b2:	d10a      	bne.n	80011ca <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b4:	4b87      	ldr	r3, [pc, #540]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80011b6:	4a87      	ldr	r2, [pc, #540]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80011b8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80011ba:	2180      	movs	r1, #128	; 0x80
 80011bc:	0549      	lsls	r1, r1, #21
 80011be:	430a      	orrs	r2, r1
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80011c2:	2317      	movs	r3, #23
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ca:	4b85      	ldr	r3, [pc, #532]	; (80013e0 <HAL_RCC_OscConfig+0x664>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4013      	ands	r3, r2
 80011d4:	d11a      	bne.n	800120c <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d6:	4b82      	ldr	r3, [pc, #520]	; (80013e0 <HAL_RCC_OscConfig+0x664>)
 80011d8:	4a81      	ldr	r2, [pc, #516]	; (80013e0 <HAL_RCC_OscConfig+0x664>)
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	0049      	lsls	r1, r1, #1
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011e4:	f7ff fa5c 	bl	80006a0 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ee:	f7ff fa57 	bl	80006a0 <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b64      	cmp	r3, #100	; 0x64
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e155      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001200:	4b77      	ldr	r3, [pc, #476]	; (80013e0 <HAL_RCC_OscConfig+0x664>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4013      	ands	r3, r2
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	429a      	cmp	r2, r3
 8001216:	d107      	bne.n	8001228 <HAL_RCC_OscConfig+0x4ac>
 8001218:	4b6e      	ldr	r3, [pc, #440]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 800121a:	4a6e      	ldr	r2, [pc, #440]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 800121c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	0049      	lsls	r1, r1, #1
 8001222:	430a      	orrs	r2, r1
 8001224:	651a      	str	r2, [r3, #80]	; 0x50
 8001226:	e031      	b.n	800128c <HAL_RCC_OscConfig+0x510>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10c      	bne.n	800124a <HAL_RCC_OscConfig+0x4ce>
 8001230:	4b68      	ldr	r3, [pc, #416]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001232:	4a68      	ldr	r2, [pc, #416]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001234:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001236:	4969      	ldr	r1, [pc, #420]	; (80013dc <HAL_RCC_OscConfig+0x660>)
 8001238:	400a      	ands	r2, r1
 800123a:	651a      	str	r2, [r3, #80]	; 0x50
 800123c:	4b65      	ldr	r3, [pc, #404]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 800123e:	4a65      	ldr	r2, [pc, #404]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001240:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001242:	4968      	ldr	r1, [pc, #416]	; (80013e4 <HAL_RCC_OscConfig+0x668>)
 8001244:	400a      	ands	r2, r1
 8001246:	651a      	str	r2, [r3, #80]	; 0x50
 8001248:	e020      	b.n	800128c <HAL_RCC_OscConfig+0x510>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	23a0      	movs	r3, #160	; 0xa0
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	429a      	cmp	r2, r3
 8001254:	d10e      	bne.n	8001274 <HAL_RCC_OscConfig+0x4f8>
 8001256:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001258:	4a5e      	ldr	r2, [pc, #376]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 800125a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	00c9      	lsls	r1, r1, #3
 8001260:	430a      	orrs	r2, r1
 8001262:	651a      	str	r2, [r3, #80]	; 0x50
 8001264:	4b5b      	ldr	r3, [pc, #364]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001266:	4a5b      	ldr	r2, [pc, #364]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001268:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800126a:	2180      	movs	r1, #128	; 0x80
 800126c:	0049      	lsls	r1, r1, #1
 800126e:	430a      	orrs	r2, r1
 8001270:	651a      	str	r2, [r3, #80]	; 0x50
 8001272:	e00b      	b.n	800128c <HAL_RCC_OscConfig+0x510>
 8001274:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001276:	4a57      	ldr	r2, [pc, #348]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001278:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800127a:	4958      	ldr	r1, [pc, #352]	; (80013dc <HAL_RCC_OscConfig+0x660>)
 800127c:	400a      	ands	r2, r1
 800127e:	651a      	str	r2, [r3, #80]	; 0x50
 8001280:	4b54      	ldr	r3, [pc, #336]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001282:	4a54      	ldr	r2, [pc, #336]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001284:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001286:	4957      	ldr	r1, [pc, #348]	; (80013e4 <HAL_RCC_OscConfig+0x668>)
 8001288:	400a      	ands	r2, r1
 800128a:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d015      	beq.n	80012c0 <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001294:	f7ff fa04 	bl	80006a0 <HAL_GetTick>
 8001298:	0003      	movs	r3, r0
 800129a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129c:	e009      	b.n	80012b2 <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800129e:	f7ff f9ff 	bl	80006a0 <HAL_GetTick>
 80012a2:	0002      	movs	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	4a4f      	ldr	r2, [pc, #316]	; (80013e8 <HAL_RCC_OscConfig+0x66c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e0fc      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b2:	4b48      	ldr	r3, [pc, #288]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80012b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4013      	ands	r3, r2
 80012bc:	d0ef      	beq.n	800129e <HAL_RCC_OscConfig+0x522>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c0:	f7ff f9ee 	bl	80006a0 <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c8:	e009      	b.n	80012de <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f7ff f9e9 	bl	80006a0 <HAL_GetTick>
 80012ce:	0002      	movs	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	4a44      	ldr	r2, [pc, #272]	; (80013e8 <HAL_RCC_OscConfig+0x66c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e0e6      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012de:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80012e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4013      	ands	r3, r2
 80012e8:	d1ef      	bne.n	80012ca <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012ea:	2317      	movs	r3, #23
 80012ec:	18fb      	adds	r3, r7, r3
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d105      	bne.n	8001300 <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f4:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80012f6:	4a37      	ldr	r2, [pc, #220]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80012f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012fa:	493c      	ldr	r1, [pc, #240]	; (80013ec <HAL_RCC_OscConfig+0x670>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2220      	movs	r2, #32
 8001306:	4013      	ands	r3, r2
 8001308:	d049      	beq.n	800139e <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d026      	beq.n	8001360 <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001314:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001316:	6892      	ldr	r2, [r2, #8]
 8001318:	2101      	movs	r1, #1
 800131a:	430a      	orrs	r2, r1
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001320:	4a2c      	ldr	r2, [pc, #176]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001322:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001324:	2101      	movs	r1, #1
 8001326:	430a      	orrs	r2, r1
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <HAL_RCC_OscConfig+0x674>)
 800132c:	4a30      	ldr	r2, [pc, #192]	; (80013f0 <HAL_RCC_OscConfig+0x674>)
 800132e:	6a12      	ldr	r2, [r2, #32]
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	0189      	lsls	r1, r1, #6
 8001334:	430a      	orrs	r2, r1
 8001336:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff f9b2 	bl	80006a0 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001342:	f7ff f9ad 	bl	80006a0 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e0ab      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2202      	movs	r2, #2
 800135a:	4013      	ands	r3, r2
 800135c:	d0f1      	beq.n	8001342 <HAL_RCC_OscConfig+0x5c6>
 800135e:	e01e      	b.n	800139e <HAL_RCC_OscConfig+0x622>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001360:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001364:	6892      	ldr	r2, [r2, #8]
 8001366:	2101      	movs	r1, #1
 8001368:	438a      	bics	r2, r1
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <HAL_RCC_OscConfig+0x674>)
 800136e:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <HAL_RCC_OscConfig+0x674>)
 8001370:	6a12      	ldr	r2, [r2, #32]
 8001372:	4920      	ldr	r1, [pc, #128]	; (80013f4 <HAL_RCC_OscConfig+0x678>)
 8001374:	400a      	ands	r2, r1
 8001376:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff f992 	bl	80006a0 <HAL_GetTick>
 800137c:	0003      	movs	r3, r0
 800137e:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001382:	f7ff f98d 	bl	80006a0 <HAL_GetTick>
 8001386:	0002      	movs	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e08b      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2202      	movs	r2, #2
 800139a:	4013      	ands	r3, r2
 800139c:	d1f1      	bne.n	8001382 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d100      	bne.n	80013a8 <HAL_RCC_OscConfig+0x62c>
 80013a6:	e080      	b.n	80014aa <HAL_RCC_OscConfig+0x72e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	220c      	movs	r2, #12
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b0c      	cmp	r3, #12
 80013b2:	d100      	bne.n	80013b6 <HAL_RCC_OscConfig+0x63a>
 80013b4:	e077      	b.n	80014a6 <HAL_RCC_OscConfig+0x72a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d158      	bne.n	8001470 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_RCC_OscConfig+0x658>)
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <HAL_RCC_OscConfig+0x67c>)
 80013c6:	400a      	ands	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ca:	f7ff f969 	bl	80006a0 <HAL_GetTick>
 80013ce:	0003      	movs	r3, r0
 80013d0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d2:	e01c      	b.n	800140e <HAL_RCC_OscConfig+0x692>
 80013d4:	40021000 	.word	0x40021000
 80013d8:	ffff1fff 	.word	0xffff1fff
 80013dc:	fffffeff 	.word	0xfffffeff
 80013e0:	40007000 	.word	0x40007000
 80013e4:	fffffbff 	.word	0xfffffbff
 80013e8:	00001388 	.word	0x00001388
 80013ec:	efffffff 	.word	0xefffffff
 80013f0:	40010000 	.word	0x40010000
 80013f4:	ffffdfff 	.word	0xffffdfff
 80013f8:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fc:	f7ff f950 	bl	80006a0 <HAL_GetTick>
 8001400:	0002      	movs	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e04e      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140e:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_RCC_OscConfig+0x738>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	049b      	lsls	r3, r3, #18
 8001416:	4013      	ands	r3, r2
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x680>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800141a:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <HAL_RCC_OscConfig+0x738>)
 800141c:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <HAL_RCC_OscConfig+0x738>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	4925      	ldr	r1, [pc, #148]	; (80014b8 <HAL_RCC_OscConfig+0x73c>)
 8001422:	4019      	ands	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4318      	orrs	r0, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001432:	4303      	orrs	r3, r0
 8001434:	430b      	orrs	r3, r1
 8001436:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_RCC_OscConfig+0x738>)
 800143a:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <HAL_RCC_OscConfig+0x738>)
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	2180      	movs	r1, #128	; 0x80
 8001440:	0449      	lsls	r1, r1, #17
 8001442:	430a      	orrs	r2, r1
 8001444:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff f92b 	bl	80006a0 <HAL_GetTick>
 800144a:	0003      	movs	r3, r0
 800144c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff f926 	bl	80006a0 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e024      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_RCC_OscConfig+0x738>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	049b      	lsls	r3, r3, #18
 800146a:	4013      	ands	r3, r2
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x6d4>
 800146e:	e01c      	b.n	80014aa <HAL_RCC_OscConfig+0x72e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_RCC_OscConfig+0x738>)
 8001472:	4a10      	ldr	r2, [pc, #64]	; (80014b4 <HAL_RCC_OscConfig+0x738>)
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	4911      	ldr	r1, [pc, #68]	; (80014bc <HAL_RCC_OscConfig+0x740>)
 8001478:	400a      	ands	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff f910 	bl	80006a0 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff f90b 	bl	80006a0 <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e009      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_RCC_OscConfig+0x738>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	049b      	lsls	r3, r3, #18
 80014a0:	4013      	ands	r3, r2
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0x70a>
 80014a4:	e001      	b.n	80014aa <HAL_RCC_OscConfig+0x72e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_RCC_OscConfig+0x730>
    }
  }
  
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b006      	add	sp, #24
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	ff02ffff 	.word	0xff02ffff
 80014bc:	feffffff 	.word	0xfeffffff

080014c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80014ce:	4b82      	ldr	r3, [pc, #520]	; (80016d8 <HAL_RCC_ClockConfig+0x218>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2201      	movs	r2, #1
 80014d4:	401a      	ands	r2, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d211      	bcs.n	8001500 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014dc:	4b7e      	ldr	r3, [pc, #504]	; (80016d8 <HAL_RCC_ClockConfig+0x218>)
 80014de:	4a7e      	ldr	r2, [pc, #504]	; (80016d8 <HAL_RCC_ClockConfig+0x218>)
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	2101      	movs	r1, #1
 80014e4:	438a      	bics	r2, r1
 80014e6:	0011      	movs	r1, r2
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014ee:	4b7a      	ldr	r3, [pc, #488]	; (80016d8 <HAL_RCC_ClockConfig+0x218>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2201      	movs	r2, #1
 80014f4:	401a      	ands	r2, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d001      	beq.n	8001500 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0e6      	b.n	80016ce <HAL_RCC_ClockConfig+0x20e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2202      	movs	r2, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d009      	beq.n	800151e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150a:	4a74      	ldr	r2, [pc, #464]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 800150c:	4b73      	ldr	r3, [pc, #460]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	21f0      	movs	r1, #240	; 0xf0
 8001512:	438b      	bics	r3, r1
 8001514:	0019      	movs	r1, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	430b      	orrs	r3, r1
 800151c:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	d100      	bne.n	800152a <HAL_RCC_ClockConfig+0x6a>
 8001528:	e089      	b.n	800163e <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b6a      	ldr	r3, [pc, #424]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	029b      	lsls	r3, r3, #10
 800153a:	4013      	ands	r3, r2
 800153c:	d120      	bne.n	8001580 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0c5      	b.n	80016ce <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154a:	4b64      	ldr	r3, [pc, #400]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	049b      	lsls	r3, r3, #18
 8001552:	4013      	ands	r3, r2
 8001554:	d114      	bne.n	8001580 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0b9      	b.n	80016ce <HAL_RCC_ClockConfig+0x20e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d106      	bne.n	8001570 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001562:	4b5e      	ldr	r3, [pc, #376]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2204      	movs	r2, #4
 8001568:	4013      	ands	r3, r2
 800156a:	d109      	bne.n	8001580 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0ae      	b.n	80016ce <HAL_RCC_ClockConfig+0x20e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8001570:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4013      	ands	r3, r2
 800157a:	d101      	bne.n	8001580 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0a6      	b.n	80016ce <HAL_RCC_ClockConfig+0x20e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001580:	4a56      	ldr	r2, [pc, #344]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 8001582:	4b56      	ldr	r3, [pc, #344]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2103      	movs	r1, #3
 8001588:	438b      	bics	r3, r1
 800158a:	0019      	movs	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	430b      	orrs	r3, r1
 8001592:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001594:	f7ff f884 	bl	80006a0 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d111      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a4:	e009      	b.n	80015ba <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a6:	f7ff f87b 	bl	80006a0 <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	4a4b      	ldr	r2, [pc, #300]	; (80016e0 <HAL_RCC_ClockConfig+0x220>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e089      	b.n	80016ce <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ba:	4b48      	ldr	r3, [pc, #288]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	220c      	movs	r2, #12
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d1ef      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xe6>
 80015c6:	e03a      	b.n	800163e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d111      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d0:	e009      	b.n	80015e6 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d2:	f7ff f865 	bl	80006a0 <HAL_GetTick>
 80015d6:	0002      	movs	r2, r0
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	4a40      	ldr	r2, [pc, #256]	; (80016e0 <HAL_RCC_ClockConfig+0x220>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e073      	b.n	80016ce <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e6:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	220c      	movs	r2, #12
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	d1ef      	bne.n	80015d2 <HAL_RCC_ClockConfig+0x112>
 80015f2:	e024      	b.n	800163e <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d11b      	bne.n	8001634 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015fc:	e009      	b.n	8001612 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fe:	f7ff f84f 	bl	80006a0 <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	4a35      	ldr	r2, [pc, #212]	; (80016e0 <HAL_RCC_ClockConfig+0x220>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e05d      	b.n	80016ce <HAL_RCC_ClockConfig+0x20e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001612:	4b32      	ldr	r3, [pc, #200]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	220c      	movs	r2, #12
 8001618:	4013      	ands	r3, r2
 800161a:	2b04      	cmp	r3, #4
 800161c:	d1ef      	bne.n	80015fe <HAL_RCC_ClockConfig+0x13e>
 800161e:	e00e      	b.n	800163e <HAL_RCC_ClockConfig+0x17e>
    }      
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f7ff f83e 	bl	80006a0 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	4a2d      	ldr	r2, [pc, #180]	; (80016e0 <HAL_RCC_ClockConfig+0x220>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e04c      	b.n	80016ce <HAL_RCC_ClockConfig+0x20e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001634:	4b29      	ldr	r3, [pc, #164]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	220c      	movs	r2, #12
 800163a:	4013      	ands	r3, r2
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <HAL_RCC_ClockConfig+0x218>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2201      	movs	r2, #1
 8001644:	401a      	ands	r2, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d911      	bls.n	8001670 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_RCC_ClockConfig+0x218>)
 800164e:	4a22      	ldr	r2, [pc, #136]	; (80016d8 <HAL_RCC_ClockConfig+0x218>)
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	2101      	movs	r1, #1
 8001654:	438a      	bics	r2, r1
 8001656:	0011      	movs	r1, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_RCC_ClockConfig+0x218>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	401a      	ands	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e02e      	b.n	80016ce <HAL_RCC_ClockConfig+0x20e>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2204      	movs	r2, #4
 8001676:	4013      	ands	r3, r2
 8001678:	d008      	beq.n	800168c <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167a:	4a18      	ldr	r2, [pc, #96]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4918      	ldr	r1, [pc, #96]	; (80016e4 <HAL_RCC_ClockConfig+0x224>)
 8001682:	4019      	ands	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	430b      	orrs	r3, r1
 800168a:	60d3      	str	r3, [r2, #12]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2208      	movs	r2, #8
 8001692:	4013      	ands	r3, r2
 8001694:	d009      	beq.n	80016aa <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001696:	4a11      	ldr	r2, [pc, #68]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4912      	ldr	r1, [pc, #72]	; (80016e8 <HAL_RCC_ClockConfig+0x228>)
 800169e:	4019      	ands	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	430b      	orrs	r3, r1
 80016a8:	60d3      	str	r3, [r2, #12]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80016aa:	f000 f823 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 80016ae:	0001      	movs	r1, r0
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_RCC_ClockConfig+0x21c>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	220f      	movs	r2, #15
 80016b8:	4013      	ands	r3, r2
 80016ba:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <HAL_RCC_ClockConfig+0x22c>)
 80016bc:	5cd3      	ldrb	r3, [r2, r3]
 80016be:	000a      	movs	r2, r1
 80016c0:	40da      	lsrs	r2, r3
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_RCC_ClockConfig+0x230>)
 80016c4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016c6:	2003      	movs	r0, #3
 80016c8:	f7fe ffc0 	bl	800064c <HAL_InitTick>
  
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	0018      	movs	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b004      	add	sp, #16
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	40022000 	.word	0x40022000
 80016dc:	40021000 	.word	0x40021000
 80016e0:	00001388 	.word	0x00001388
 80016e4:	fffff8ff 	.word	0xfffff8ff
 80016e8:	ffffc7ff 	.word	0xffffc7ff
 80016ec:	08003670 	.word	0x08003670
 80016f0:	20000000 	.word	0x20000000

080016f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, pllm = 0, plld = 0, pllvco = 0, msiclkrange = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	2300      	movs	r3, #0
 800170c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HAL_RCC_GetSysClockFreq+0xe8>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	220c      	movs	r2, #12
 800171c:	4013      	ands	r3, r2
 800171e:	2b08      	cmp	r3, #8
 8001720:	d00e      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0x4c>
 8001722:	2b0c      	cmp	r3, #12
 8001724:	d00f      	beq.n	8001746 <HAL_RCC_GetSysClockFreq+0x52>
 8001726:	2b04      	cmp	r3, #4
 8001728:	d145      	bne.n	80017b6 <HAL_RCC_GetSysClockFreq+0xc2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 800172a:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <HAL_RCC_GetSysClockFreq+0xe8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2210      	movs	r2, #16
 8001730:	4013      	ands	r3, r2
 8001732:	d002      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x46>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001734:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xec>)
 8001736:	613b      	str	r3, [r7, #16]
      }
      else 
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001738:	e04b      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0xde>
        sysclockfreq =  HSI_VALUE;
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800173c:	613b      	str	r3, [r7, #16]
      break;
 800173e:	e048      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001740:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001742:	613b      	str	r3, [r7, #16]
      break;
 8001744:	e045      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	0c9b      	lsrs	r3, r3, #18
 800174a:	220f      	movs	r2, #15
 800174c:	4013      	ands	r3, r2
 800174e:	4a27      	ldr	r2, [pc, #156]	; (80017ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001750:	5cd3      	ldrb	r3, [r2, r3]
 8001752:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	0d9b      	lsrs	r3, r3, #22
 8001758:	2203      	movs	r2, #3
 800175a:	4013      	ands	r3, r2
 800175c:	3301      	adds	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <HAL_RCC_GetSysClockFreq+0xe8>)
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	025b      	lsls	r3, r3, #9
 8001768:	4013      	ands	r3, r2
 800176a:	d009      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001770:	4353      	muls	r3, r2
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	0018      	movs	r0, r3
 8001776:	f7fe fccf 	bl	8000118 <__udivsi3>
 800177a:	0003      	movs	r3, r0
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e017      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0xbc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_RCC_GetSysClockFreq+0xe8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2210      	movs	r2, #16
 8001786:	4013      	ands	r3, r2
 8001788:	d009      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xec>)
 800178e:	4353      	muls	r3, r2
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	0018      	movs	r0, r3
 8001794:	f7fe fcc0 	bl	8000118 <__udivsi3>
 8001798:	0003      	movs	r3, r0
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e008      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0xbc>
        }
        else 
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80017a2:	4353      	muls	r3, r2
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7fe fcb6 	bl	8000118 <__udivsi3>
 80017ac:	0003      	movs	r3, r0
 80017ae:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
      break;
 80017b4:	e00d      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0xde>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_GetSysClockFreq+0xe8>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	0b5b      	lsrs	r3, r3, #13
 80017bc:	2207      	movs	r2, #7
 80017be:	4013      	ands	r3, r2
 80017c0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	0212      	lsls	r2, r2, #8
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
      break;
 80017d0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017d2:	693b      	ldr	r3, [r7, #16]
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b006      	add	sp, #24
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021000 	.word	0x40021000
 80017e0:	003d0900 	.word	0x003d0900
 80017e4:	00f42400 	.word	0x00f42400
 80017e8:	007a1200 	.word	0x007a1200
 80017ec:	08003688 	.word	0x08003688

080017f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f4:	4b02      	ldr	r3, [pc, #8]	; (8001800 <HAL_RCC_GetHCLKFreq+0x10>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	20000000 	.word	0x20000000

08001804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001808:	f7ff fff2 	bl	80017f0 <HAL_RCC_GetHCLKFreq>
 800180c:	0001      	movs	r1, r0
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	2207      	movs	r2, #7
 8001816:	4013      	ands	r3, r2
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_RCC_GetPCLK1Freq+0x28>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	40d9      	lsrs	r1, r3
 800181e:	000b      	movs	r3, r1
}    
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	40021000 	.word	0x40021000
 800182c:	08003680 	.word	0x08003680

08001830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001834:	f7ff ffdc 	bl	80017f0 <HAL_RCC_GetHCLKFreq>
 8001838:	0001      	movs	r1, r0
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	0adb      	lsrs	r3, r3, #11
 8001840:	2207      	movs	r2, #7
 8001842:	4013      	ands	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001846:	5cd3      	ldrb	r3, [r2, r3]
 8001848:	40d9      	lsrs	r1, r3
 800184a:	000b      	movs	r3, r1
} 
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	40021000 	.word	0x40021000
 8001858:	08003680 	.word	0x08003680

0800185c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800186c:	4b23      	ldr	r3, [pc, #140]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	22f0      	movs	r2, #240	; 0xf0
 8001872:	4013      	ands	r3, r2
 8001874:	d12b      	bne.n	80018ce <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8001878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	055b      	lsls	r3, r3, #21
 800187e:	4013      	ands	r3, r2
 8001880:	d006      	beq.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0x34>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	23c0      	movs	r3, #192	; 0xc0
 8001888:	015b      	lsls	r3, r3, #5
 800188a:	4013      	ands	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e012      	b.n	80018b6 <RCC_SetFlashLatencyFromMSIRange+0x5a>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8001892:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 8001894:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	0549      	lsls	r1, r1, #21
 800189a:	430a      	orrs	r2, r1
 800189c:	639a      	str	r2, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <RCC_SetFlashLatencyFromMSIRange+0xa4>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	23c0      	movs	r3, #192	; 0xc0
 80018a4:	015b      	lsls	r3, r3, #5
 80018a6:	4013      	ands	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
      __HAL_RCC_PWR_CLK_DISABLE();
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 80018ac:	4a13      	ldr	r2, [pc, #76]	; (80018fc <RCC_SetFlashLatencyFromMSIRange+0xa0>)
 80018ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018b0:	4914      	ldr	r1, [pc, #80]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xa8>)
 80018b2:	400a      	ands	r2, r1
 80018b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	23c0      	movs	r3, #192	; 0xc0
 80018ba:	015b      	lsls	r3, r3, #5
 80018bc:	429a      	cmp	r2, r3
 80018be:	d106      	bne.n	80018ce <RCC_SetFlashLatencyFromMSIRange+0x72>
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	23c0      	movs	r3, #192	; 0xc0
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d101      	bne.n	80018ce <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80018ca:	2301      	movs	r3, #1
 80018cc:	60bb      	str	r3, [r7, #8]
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	2101      	movs	r1, #1
 80018d6:	438a      	bics	r2, r1
 80018d8:	0011      	movs	r1, r2
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2201      	movs	r2, #1
 80018e6:	401a      	ands	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d001      	beq.n	80018f2 <RCC_SetFlashLatencyFromMSIRange+0x96>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <RCC_SetFlashLatencyFromMSIRange+0x98>
  }
  
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b004      	add	sp, #16
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000
 8001900:	40007000 	.word	0x40007000
 8001904:	efffffff 	.word	0xefffffff
 8001908:	40022000 	.word	0x40022000

0800190c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t srcclk = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
#if defined(USB)
    uint32_t pllmul = 0U, plldiv = 0U, pllvco = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b10      	cmp	r3, #16
 8001934:	d100      	bne.n	8001938 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8001936:	e188      	b.n	8001c4a <HAL_RCCEx_GetPeriphCLKFreq+0x33e>
 8001938:	d80e      	bhi.n	8001958 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>
 800193a:	2b02      	cmp	r3, #2
 800193c:	d100      	bne.n	8001940 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
 800193e:	e0f3      	b.n	8001b28 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
 8001940:	d803      	bhi.n	800194a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8001942:	2b01      	cmp	r3, #1
 8001944:	d100      	bne.n	8001948 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8001946:	e0be      	b.n	8001ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
      break;
    } 
#endif /* RCC_CCIPR_I2C3SEL */
  default: 
    {
      break;
 8001948:	e1cc      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  switch (PeriphClk)
 800194a:	2b04      	cmp	r3, #4
 800194c:	d100      	bne.n	8001950 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 800194e:	e11c      	b.n	8001b8a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
 8001950:	2b08      	cmp	r3, #8
 8001952:	d100      	bne.n	8001956 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001954:	e151      	b.n	8001bfa <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
      break;
 8001956:	e1c5      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  switch (PeriphClk)
 8001958:	2b40      	cmp	r3, #64	; 0x40
 800195a:	d100      	bne.n	800195e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800195c:	e060      	b.n	8001a20 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800195e:	d802      	bhi.n	8001966 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8001960:	2b20      	cmp	r3, #32
 8001962:	d00a      	beq.n	800197a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
      break;
 8001964:	e1be      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  switch (PeriphClk)
 8001966:	2280      	movs	r2, #128	; 0x80
 8001968:	0052      	lsls	r2, r2, #1
 800196a:	4293      	cmp	r3, r2
 800196c:	d100      	bne.n	8001970 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800196e:	e191      	b.n	8001c94 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8001970:	2280      	movs	r2, #128	; 0x80
 8001972:	0112      	lsls	r2, r2, #4
 8001974:	4293      	cmp	r3, r2
 8001976:	d000      	beq.n	800197a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
      break;
 8001978:	e1b4      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      temp_reg = RCC->CSR;
 800197a:	4bbc      	ldr	r3, [pc, #752]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 800197c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800197e:	61fb      	str	r3, [r7, #28]
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8001980:	4bba      	ldr	r3, [pc, #744]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001982:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001984:	23c0      	movs	r3, #192	; 0xc0
 8001986:	029b      	lsls	r3, r3, #10
 8001988:	4013      	ands	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	025b      	lsls	r3, r3, #9
 8001992:	429a      	cmp	r2, r3
 8001994:	d108      	bne.n	80019a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4013      	ands	r3, r2
 800199e:	d003      	beq.n	80019a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        frequency = LSE_VALUE;
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
 80019a6:	e03a      	b.n	8001a1e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	029b      	lsls	r3, r3, #10
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d106      	bne.n	80019c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	2202      	movs	r2, #2
 80019b6:	4013      	ands	r3, r2
 80019b8:	d002      	beq.n	80019c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        frequency = LSI_VALUE;
 80019ba:	4bad      	ldr	r3, [pc, #692]	; (8001c70 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	e02e      	b.n	8001a1e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	23c0      	movs	r3, #192	; 0xc0
 80019c4:	029b      	lsls	r3, r3, #10
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d126      	bne.n	8001a18 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80019ca:	4ba8      	ldr	r3, [pc, #672]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	029b      	lsls	r3, r3, #10
 80019d2:	4013      	ands	r3, r2
 80019d4:	d020      	beq.n	8001a18 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 80019d6:	4ba5      	ldr	r3, [pc, #660]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	23c0      	movs	r3, #192	; 0xc0
 80019dc:	039b      	lsls	r3, r3, #14
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        switch (clkprediv)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	0392      	lsls	r2, r2, #14
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00b      	beq.n	8001a04 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 80019ec:	22c0      	movs	r2, #192	; 0xc0
 80019ee:	0392      	lsls	r2, r2, #14
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d004      	beq.n	80019fe <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80019f4:	2280      	movs	r2, #128	; 0x80
 80019f6:	0352      	lsls	r2, r2, #13
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d006      	beq.n	8001a0a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80019fc:	e008      	b.n	8001a10 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            frequency = HSE_VALUE / 16U;
 80019fe:	4b9d      	ldr	r3, [pc, #628]	; (8001c74 <HAL_RCCEx_GetPeriphCLKFreq+0x368>)
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a02:	e008      	b.n	8001a16 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
            frequency = HSE_VALUE / 8U;
 8001a04:	4b9c      	ldr	r3, [pc, #624]	; (8001c78 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a08:	e005      	b.n	8001a16 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
            frequency = HSE_VALUE / 4U;
 8001a0a:	4b9c      	ldr	r3, [pc, #624]	; (8001c7c <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a0e:	e002      	b.n	8001a16 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
            frequency = HSE_VALUE / 2U;
 8001a10:	4b9b      	ldr	r3, [pc, #620]	; (8001c80 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a14:	46c0      	nop			; (mov r8, r8)
      }
 8001a16:	e002      	b.n	8001a1e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001a1c:	e162      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8001a1e:	e161      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8001a20:	4b92      	ldr	r3, [pc, #584]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	04db      	lsls	r3, r3, #19
 8001a28:	4013      	ands	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d138      	bne.n	8001aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8001a32:	4b8e      	ldr	r3, [pc, #568]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	049b      	lsls	r3, r3, #18
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d032      	beq.n	8001aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8001a3e:	4b8b      	ldr	r3, [pc, #556]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	23f0      	movs	r3, #240	; 0xf0
 8001a44:	039b      	lsls	r3, r3, #14
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8001a4a:	4b88      	ldr	r3, [pc, #544]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	23c0      	movs	r3, #192	; 0xc0
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	4013      	ands	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	0c9b      	lsrs	r3, r3, #18
 8001a5a:	4a8a      	ldr	r2, [pc, #552]	; (8001c84 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
 8001a5e:	613b      	str	r3, [r7, #16]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	0d9b      	lsrs	r3, r3, #22
 8001a64:	3301      	adds	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8001a68:	4b80      	ldr	r3, [pc, #512]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	025b      	lsls	r3, r3, #9
 8001a70:	4013      	ands	r3, r2
 8001a72:	d10a      	bne.n	8001a8a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8001a74:	4b7d      	ldr	r3, [pc, #500]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2210      	movs	r2, #16
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d002      	beq.n	8001a84 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
                    pllvco =  (HSI_VALUE >> 2U);
 8001a7e:	4b80      	ldr	r3, [pc, #512]	; (8001c80 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8001a80:	623b      	str	r3, [r7, #32]
 8001a82:	e004      	b.n	8001a8e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
                    pllvco =  HSI_VALUE;
 8001a84:	4b80      	ldr	r3, [pc, #512]	; (8001c88 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8001a86:	623b      	str	r3, [r7, #32]
 8001a88:	e001      	b.n	8001a8e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
                pllvco = HSE_VALUE;
 8001a8a:	4b80      	ldr	r3, [pc, #512]	; (8001c8c <HAL_RCCEx_GetPeriphCLKFreq+0x380>)
 8001a8c:	623b      	str	r3, [r7, #32]
            pllvco = (pllvco * pllmul);
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4353      	muls	r3, r2
 8001a94:	623b      	str	r3, [r7, #32]
            frequency = (pllvco/ plldiv);
 8001a96:	68f9      	ldr	r1, [r7, #12]
 8001a98:	6a38      	ldr	r0, [r7, #32]
 8001a9a:	f7fe fb3d 	bl	8000118 <__udivsi3>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa2:	e00f      	b.n	8001ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	04db      	lsls	r3, r3, #19
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d107      	bne.n	8001abe <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8001aae:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d002      	beq.n	8001abe <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
            frequency = HSI48_VALUE;
 8001ab8:	4b75      	ldr	r3, [pc, #468]	; (8001c90 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
 8001abc:	e002      	b.n	8001ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
            frequency = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8001ac2:	e10f      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8001ac4:	e10e      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8001ac6:	4b69      	ldr	r3, [pc, #420]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	2203      	movs	r2, #3
 8001acc:	4013      	ands	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d104      	bne.n	8001ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
        frequency = HAL_RCC_GetPCLK2Freq();
 8001ad6:	f7ff feab 	bl	8001830 <HAL_RCC_GetPCLK2Freq>
 8001ada:	0003      	movs	r3, r0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001ade:	e101      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8001ae6:	4b61      	ldr	r3, [pc, #388]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2204      	movs	r2, #4
 8001aec:	4013      	ands	r3, r2
 8001aee:	d002      	beq.n	8001af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
        frequency = HSI_VALUE;
 8001af0:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
 8001af4:	e017      	b.n	8001b26 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d104      	bne.n	8001b06 <HAL_RCCEx_GetPeriphCLKFreq+0x1fa>
        frequency = HAL_RCC_GetSysClockFreq();
 8001afc:	f7ff fdfa 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 8001b00:	0003      	movs	r3, r0
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001b04:	e0ee      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d109      	bne.n	8001b20 <HAL_RCCEx_GetPeriphCLKFreq+0x214>
 8001b0c:	4b57      	ldr	r3, [pc, #348]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001b0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	d003      	beq.n	8001b20 <HAL_RCCEx_GetPeriphCLKFreq+0x214>
        frequency = LSE_VALUE;
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	e002      	b.n	8001b26 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
        frequency = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001b24:	e0de      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8001b26:	e0dd      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8001b28:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	220c      	movs	r2, #12
 8001b2e:	4013      	ands	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d104      	bne.n	8001b42 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
        frequency = HAL_RCC_GetPCLK1Freq();
 8001b38:	f7ff fe64 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001b40:	e0d0      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d107      	bne.n	8001b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8001b48:	4b48      	ldr	r3, [pc, #288]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d002      	beq.n	8001b58 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
        frequency = HSI_VALUE;
 8001b52:	4b4d      	ldr	r3, [pc, #308]	; (8001c88 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
 8001b56:	e017      	b.n	8001b88 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d104      	bne.n	8001b68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
        frequency = HAL_RCC_GetSysClockFreq();
 8001b5e:	f7ff fdc9 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 8001b62:	0003      	movs	r3, r0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001b66:	e0bd      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8001b6e:	4b3f      	ldr	r3, [pc, #252]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4013      	ands	r3, r2
 8001b78:	d003      	beq.n	8001b82 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        frequency = LSE_VALUE;
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b80:	e002      	b.n	8001b88 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
        frequency = 0U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001b86:	e0ad      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8001b88:	e0ac      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8001b8a:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001b8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b8e:	23c0      	movs	r3, #192	; 0xc0
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4013      	ands	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d104      	bne.n	8001ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8001b9c:	f7ff fe32 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001ba4:	e09e      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d002      	beq.n	8001bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
        frequency = HSI_VALUE;
 8001bba:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	e01b      	b.n	8001bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d104      	bne.n	8001bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        frequency = HAL_RCC_GetSysClockFreq();
 8001bca:	f7ff fd93 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001bd2:	e087      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	23c0      	movs	r3, #192	; 0xc0
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d109      	bne.n	8001bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
        frequency = LSE_VALUE;
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf0:	e002      	b.n	8001bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
        frequency = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001bf6:	e075      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8001bf8:	e074      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001bfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bfe:	23c0      	movs	r3, #192	; 0xc0
 8001c00:	019b      	lsls	r3, r3, #6
 8001c02:	4013      	ands	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d104      	bne.n	8001c16 <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8001c0c:	f7ff fdfa 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8001c10:	0003      	movs	r3, r0
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001c14:	e066      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	019b      	lsls	r3, r3, #6
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2204      	movs	r2, #4
 8001c26:	4013      	ands	r3, r2
 8001c28:	d002      	beq.n	8001c30 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        frequency = HSI_VALUE;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>)
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001c2e:	e059      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	015b      	lsls	r3, r3, #5
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d104      	bne.n	8001c44 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
        frequency = HAL_RCC_GetSysClockFreq();
 8001c3a:	f7ff fd5b 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001c42:	e04f      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001c48:	e04c      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8001c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	03db      	lsls	r3, r3, #15
 8001c52:	401a      	ands	r2, r3
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	03db      	lsls	r3, r3, #15
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d104      	bne.n	8001c66 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8001c5c:	f7ff fdd2 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8001c60:	0003      	movs	r3, r0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001c64:	e03e      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001c6a:	e03b      	b.n	8001ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	00009088 	.word	0x00009088
 8001c74:	0007a120 	.word	0x0007a120
 8001c78:	000f4240 	.word	0x000f4240
 8001c7c:	001e8480 	.word	0x001e8480
 8001c80:	003d0900 	.word	0x003d0900
 8001c84:	08003688 	.word	0x08003688
 8001c88:	00f42400 	.word	0x00f42400
 8001c8c:	007a1200 	.word	0x007a1200
 8001c90:	02dc6c00 	.word	0x02dc6c00
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8001c94:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>)
 8001c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c98:	23c0      	movs	r3, #192	; 0xc0
 8001c9a:	029b      	lsls	r3, r3, #10
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d104      	bne.n	8001cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8001ca6:	f7ff fdad 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8001caa:	0003      	movs	r3, r0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001cae:	e018      	b.n	8001ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	029b      	lsls	r3, r3, #10
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d107      	bne.n	8001cca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d002      	beq.n	8001cca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        frequency = HSI_VALUE;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>)
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001cc8:	e00b      	b.n	8001ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	025b      	lsls	r3, r3, #9
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d104      	bne.n	8001cde <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
        frequency = HAL_RCC_GetSysClockFreq();
 8001cd4:	f7ff fd0e 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001cdc:	e001      	b.n	8001ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
        frequency = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001ce2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return(frequency);
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b00a      	add	sp, #40	; 0x28
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	00f42400 	.word	0x00f42400

08001cf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e047      	b.n	8001d9a <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2269      	movs	r2, #105	; 0x69
 8001d0e:	5c9b      	ldrb	r3, [r3, r2]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2268      	movs	r2, #104	; 0x68
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 ff83 	bl	8002c2c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2269      	movs	r2, #105	; 0x69
 8001d2a:	2124      	movs	r1, #36	; 0x24
 8001d2c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	2101      	movs	r1, #1
 8001d3a:	438a      	bics	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_UART_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 fd3d 	bl	80027c8 <UART_AdvFeatureConfig>
  }

  if (UART_SetConfig(huart) == HAL_ERROR)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f000 f9eb 	bl	800212c <UART_SetConfig>
 8001d56:	0003      	movs	r3, r0
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_UART_Init+0x68>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e01c      	b.n	8001d9a <HAL_UART_Init+0xa2>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	6852      	ldr	r2, [r2, #4]
 8001d6a:	490e      	ldr	r1, [pc, #56]	; (8001da4 <HAL_UART_Init+0xac>)
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	6892      	ldr	r2, [r2, #8]
 8001d7a:	212a      	movs	r1, #42	; 0x2a
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	0018      	movs	r0, r3
 8001d94:	f000 fdc4 	bl	8002920 <UART_CheckIdleState>
 8001d98:	0003      	movs	r3, r0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b002      	add	sp, #8
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	ffffb7ff 	.word	0xffffb7ff

08001da8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e02b      	b.n	8001e12 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2269      	movs	r2, #105	; 0x69
 8001dbe:	2124      	movs	r1, #36	; 0x24
 8001dc0:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	438a      	bics	r2, r1
 8001dd0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2200      	movs	r2, #0
 8001de0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 f814 	bl	8001e1a <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->gState    = HAL_UART_STATE_RESET;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2269      	movs	r2, #105	; 0x69
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	5499      	strb	r1, [r3, r2]
  huart->RxState   = HAL_UART_STATE_RESET;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	226a      	movs	r2, #106	; 0x6a
 8001e04:	2100      	movs	r1, #0
 8001e06:	5499      	strb	r1, [r3, r2]

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2268      	movs	r2, #104	; 0x68
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b002      	add	sp, #8
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	b002      	add	sp, #8
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b088      	sub	sp, #32
 8001e2e:	af02      	add	r7, sp, #8
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	1dbb      	adds	r3, r7, #6
 8001e38:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2269      	movs	r2, #105	; 0x69
 8001e42:	5c9b      	ldrb	r3, [r3, r2]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d000      	beq.n	8001e4c <HAL_UART_Transmit+0x22>
 8001e4a:	e08a      	b.n	8001f62 <HAL_UART_Transmit+0x138>
  {
    if((pData == NULL ) || (Size == 0U))
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_UART_Transmit+0x30>
 8001e52:	1dbb      	adds	r3, r7, #6
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e082      	b.n	8001f64 <HAL_UART_Transmit+0x13a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	015b      	lsls	r3, r3, #5
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d109      	bne.n	8001e7e <HAL_UART_Transmit+0x54>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d105      	bne.n	8001e7e <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1) != 0)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2201      	movs	r2, #1
 8001e76:	4013      	ands	r3, r2
 8001e78:	d001      	beq.n	8001e7e <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e072      	b.n	8001f64 <HAL_UART_Transmit+0x13a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2268      	movs	r2, #104	; 0x68
 8001e82:	5c9b      	ldrb	r3, [r3, r2]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_UART_Transmit+0x62>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e06b      	b.n	8001f64 <HAL_UART_Transmit+0x13a>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2268      	movs	r2, #104	; 0x68
 8001e90:	2101      	movs	r1, #1
 8001e92:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2269      	movs	r2, #105	; 0x69
 8001e9e:	2121      	movs	r1, #33	; 0x21
 8001ea0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001ea2:	f7fe fbfd 	bl	80006a0 <HAL_GetTick>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1dba      	adds	r2, r7, #6
 8001eae:	2150      	movs	r1, #80	; 0x50
 8001eb0:	8812      	ldrh	r2, [r2, #0]
 8001eb2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1dba      	adds	r2, r7, #6
 8001eb8:	2152      	movs	r1, #82	; 0x52
 8001eba:	8812      	ldrh	r2, [r2, #0]
 8001ebc:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0U)
 8001ebe:	e033      	b.n	8001f28 <HAL_UART_Transmit+0xfe>
    {
      huart->TxXferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2252      	movs	r2, #82	; 0x52
 8001ec4:	5a9b      	ldrh	r3, [r3, r2]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b299      	uxth	r1, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2252      	movs	r2, #82	; 0x52
 8001ed0:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	0013      	movs	r3, r2
 8001edc:	2200      	movs	r2, #0
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	f000 fd68 	bl	80029b4 <UART_WaitOnFlagUntilTimeout>
 8001ee4:	1e03      	subs	r3, r0, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e03b      	b.n	8001f64 <HAL_UART_Transmit+0x13a>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	015b      	lsls	r3, r3, #5
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d110      	bne.n	8001f1a <HAL_UART_Transmit+0xf0>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10c      	bne.n	8001f1a <HAL_UART_Transmit+0xf0>
      {
        tmp = (uint16_t*) pData;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	8812      	ldrh	r2, [r2, #0]
 8001f0c:	05d2      	lsls	r2, r2, #23
 8001f0e:	0dd2      	lsrs	r2, r2, #23
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2U;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3302      	adds	r3, #2
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	e006      	b.n	8001f28 <HAL_UART_Transmit+0xfe>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	1c51      	adds	r1, r2, #1
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	7812      	ldrb	r2, [r2, #0]
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2252      	movs	r2, #82	; 0x52
 8001f2c:	5a9b      	ldrh	r3, [r3, r2]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1c5      	bne.n	8001ec0 <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	0013      	movs	r3, r2
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2140      	movs	r1, #64	; 0x40
 8001f42:	f000 fd37 	bl	80029b4 <UART_WaitOnFlagUntilTimeout>
 8001f46:	1e03      	subs	r3, r0, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_UART_Transmit+0x124>
    {
      return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e00a      	b.n	8001f64 <HAL_UART_Transmit+0x13a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2269      	movs	r2, #105	; 0x69
 8001f52:	2120      	movs	r1, #32
 8001f54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2268      	movs	r2, #104	; 0x68
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e000      	b.n	8001f64 <HAL_UART_Transmit+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8001f62:	2302      	movs	r3, #2
  }
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b006      	add	sp, #24
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	1dbb      	adds	r3, r7, #6
 8001f7a:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	226a      	movs	r2, #106	; 0x6a
 8001f84:	5c9b      	ldrb	r3, [r3, r2]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d000      	beq.n	8001f8e <HAL_UART_Receive+0x22>
 8001f8c:	e0c7      	b.n	800211e <HAL_UART_Receive+0x1b2>
  {
    if((pData == NULL ) || (Size == 0U))
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_UART_Receive+0x30>
 8001f94:	1dbb      	adds	r3, r7, #6
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_UART_Receive+0x34>
    {
      return  HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e0bf      	b.n	8002120 <HAL_UART_Receive+0x1b4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	015b      	lsls	r3, r3, #5
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d109      	bne.n	8001fc0 <HAL_UART_Receive+0x54>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <HAL_UART_Receive+0x54>
    {
      if((((uint32_t)pData)&1) != 0)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d001      	beq.n	8001fc0 <HAL_UART_Receive+0x54>
      {
        return  HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0af      	b.n	8002120 <HAL_UART_Receive+0x1b4>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2268      	movs	r2, #104	; 0x68
 8001fc4:	5c9b      	ldrb	r3, [r3, r2]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_UART_Receive+0x62>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e0a8      	b.n	8002120 <HAL_UART_Receive+0x1b4>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2268      	movs	r2, #104	; 0x68
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	226a      	movs	r2, #106	; 0x6a
 8001fe0:	2122      	movs	r1, #34	; 0x22
 8001fe2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001fe4:	f7fe fb5c 	bl	80006a0 <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	61fb      	str	r3, [r7, #28]

    huart->RxXferSize = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1dba      	adds	r2, r7, #6
 8001ff0:	2158      	movs	r1, #88	; 0x58
 8001ff2:	8812      	ldrh	r2, [r2, #0]
 8001ff4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1dba      	adds	r2, r7, #6
 8001ffa:	215a      	movs	r1, #90	; 0x5a
 8001ffc:	8812      	ldrh	r2, [r2, #0]
 8001ffe:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	015b      	lsls	r3, r3, #5
 8002008:	429a      	cmp	r2, r3
 800200a:	d10d      	bne.n	8002028 <HAL_UART_Receive+0xbc>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d104      	bne.n	800201e <HAL_UART_Receive+0xb2>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	225c      	movs	r2, #92	; 0x5c
 8002018:	4943      	ldr	r1, [pc, #268]	; (8002128 <HAL_UART_Receive+0x1bc>)
 800201a:	5299      	strh	r1, [r3, r2]
 800201c:	e029      	b.n	8002072 <HAL_UART_Receive+0x106>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	225c      	movs	r2, #92	; 0x5c
 8002022:	21ff      	movs	r1, #255	; 0xff
 8002024:	5299      	strh	r1, [r3, r2]
 8002026:	e024      	b.n	8002072 <HAL_UART_Receive+0x106>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10d      	bne.n	800204c <HAL_UART_Receive+0xe0>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d104      	bne.n	8002042 <HAL_UART_Receive+0xd6>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	225c      	movs	r2, #92	; 0x5c
 800203c:	21ff      	movs	r1, #255	; 0xff
 800203e:	5299      	strh	r1, [r3, r2]
 8002040:	e017      	b.n	8002072 <HAL_UART_Receive+0x106>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	225c      	movs	r2, #92	; 0x5c
 8002046:	217f      	movs	r1, #127	; 0x7f
 8002048:	5299      	strh	r1, [r3, r2]
 800204a:	e012      	b.n	8002072 <HAL_UART_Receive+0x106>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	055b      	lsls	r3, r3, #21
 8002054:	429a      	cmp	r2, r3
 8002056:	d10c      	bne.n	8002072 <HAL_UART_Receive+0x106>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d104      	bne.n	800206a <HAL_UART_Receive+0xfe>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	225c      	movs	r2, #92	; 0x5c
 8002064:	217f      	movs	r1, #127	; 0x7f
 8002066:	5299      	strh	r1, [r3, r2]
 8002068:	e003      	b.n	8002072 <HAL_UART_Receive+0x106>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	225c      	movs	r2, #92	; 0x5c
 800206e:	213f      	movs	r1, #63	; 0x3f
 8002070:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002072:	231a      	movs	r3, #26
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	215c      	movs	r1, #92	; 0x5c
 800207a:	5a52      	ldrh	r2, [r2, r1]
 800207c:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800207e:	e03e      	b.n	80020fe <HAL_UART_Receive+0x192>
    {
      huart->RxXferCount--;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	225a      	movs	r2, #90	; 0x5a
 8002084:	5a9b      	ldrh	r3, [r3, r2]
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b299      	uxth	r1, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	225a      	movs	r2, #90	; 0x5a
 8002090:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002092:	69fa      	ldr	r2, [r7, #28]
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	0013      	movs	r3, r2
 800209c:	2200      	movs	r2, #0
 800209e:	2120      	movs	r1, #32
 80020a0:	f000 fc88 	bl	80029b4 <UART_WaitOnFlagUntilTimeout>
 80020a4:	1e03      	subs	r3, r0, #0
 80020a6:	d001      	beq.n	80020ac <HAL_UART_Receive+0x140>
      {
        return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e039      	b.n	8002120 <HAL_UART_Receive+0x1b4>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	015b      	lsls	r3, r3, #5
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d114      	bne.n	80020e2 <HAL_UART_Receive+0x176>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d110      	bne.n	80020e2 <HAL_UART_Receive+0x176>
      {
        tmp = (uint16_t*) pData ;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	221a      	movs	r2, #26
 80020ce:	18ba      	adds	r2, r7, r2
 80020d0:	8812      	ldrh	r2, [r2, #0]
 80020d2:	4013      	ands	r3, r2
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	3302      	adds	r3, #2
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	e00d      	b.n	80020fe <HAL_UART_Receive+0x192>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	60ba      	str	r2, [r7, #8]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	211a      	movs	r1, #26
 80020f2:	1879      	adds	r1, r7, r1
 80020f4:	8809      	ldrh	r1, [r1, #0]
 80020f6:	b2c9      	uxtb	r1, r1
 80020f8:	400a      	ands	r2, r1
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	225a      	movs	r2, #90	; 0x5a
 8002102:	5a9b      	ldrh	r3, [r3, r2]
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1ba      	bne.n	8002080 <HAL_UART_Receive+0x114>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	226a      	movs	r2, #106	; 0x6a
 800210e:	2120      	movs	r1, #32
 8002110:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2268      	movs	r2, #104	; 0x68
 8002116:	2100      	movs	r1, #0
 8002118:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e000      	b.n	8002120 <HAL_UART_Receive+0x1b4>
  }
  else
  {
    return HAL_BUSY;
 800211e:	2302      	movs	r3, #2
  }
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b008      	add	sp, #32
 8002126:	bd80      	pop	{r7, pc}
 8002128:	000001ff 	.word	0x000001ff

0800212c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800212c:	b5b0      	push	{r4, r5, r7, lr}
 800212e:	b08c      	sub	sp, #48	; 0x30
 8002130:	af00      	add	r7, sp, #0
 8002132:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg                     = 0x00000000U;
 8002134:	2300      	movs	r3, #0
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002138:	2313      	movs	r3, #19
 800213a:	2218      	movs	r2, #24
 800213c:	4694      	mov	ip, r2
 800213e:	44bc      	add	ip, r7
 8002140:	4463      	add	r3, ip
 8002142:	2210      	movs	r2, #16
 8002144:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8002146:	230c      	movs	r3, #12
 8002148:	2218      	movs	r2, #24
 800214a:	4694      	mov	ip, r2
 800214c:	44bc      	add	ip, r7
 800214e:	4463      	add	r3, ip
 8002150:	2200      	movs	r2, #0
 8002152:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8002154:	2310      	movs	r3, #16
 8002156:	2218      	movs	r2, #24
 8002158:	4694      	mov	ip, r2
 800215a:	44bc      	add	ip, r7
 800215c:	4463      	add	r3, ip
 800215e:	2200      	movs	r2, #0
 8002160:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002162:	230f      	movs	r3, #15
 8002164:	2218      	movs	r2, #24
 8002166:	4694      	mov	ip, r2
 8002168:	44bc      	add	ip, r7
 800216a:	4463      	add	r3, ip
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	431a      	orrs	r2, r3
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	431a      	orrs	r2, r3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	4313      	orrs	r3, r2
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	49c7      	ldr	r1, [pc, #796]	; (80024b0 <UART_SetConfig+0x384>)
 8002194:	4011      	ands	r1, r2
 8002196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	6852      	ldr	r2, [r2, #4]
 80021a6:	49c3      	ldr	r1, [pc, #780]	; (80024b4 <UART_SetConfig+0x388>)
 80021a8:	4011      	ands	r1, r2
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	68d2      	ldr	r2, [r2, #12]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4abe      	ldr	r2, [pc, #760]	; (80024b8 <UART_SetConfig+0x38c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d004      	beq.n	80021cc <UART_SetConfig+0xa0>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021c8:	4313      	orrs	r3, r2
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	6892      	ldr	r2, [r2, #8]
 80021d6:	49b9      	ldr	r1, [pc, #740]	; (80024bc <UART_SetConfig+0x390>)
 80021d8:	4011      	ands	r1, r2
 80021da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021dc:	430a      	orrs	r2, r1
 80021de:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4ab6      	ldr	r2, [pc, #728]	; (80024c0 <UART_SetConfig+0x394>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d134      	bne.n	8002254 <UART_SetConfig+0x128>
 80021ea:	4bb6      	ldr	r3, [pc, #728]	; (80024c4 <UART_SetConfig+0x398>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	2203      	movs	r2, #3
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d015      	beq.n	8002222 <UART_SetConfig+0xf6>
 80021f6:	d304      	bcc.n	8002202 <UART_SetConfig+0xd6>
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d00a      	beq.n	8002212 <UART_SetConfig+0xe6>
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d018      	beq.n	8002232 <UART_SetConfig+0x106>
 8002200:	e01f      	b.n	8002242 <UART_SetConfig+0x116>
 8002202:	2313      	movs	r3, #19
 8002204:	2218      	movs	r2, #24
 8002206:	4694      	mov	ip, r2
 8002208:	44bc      	add	ip, r7
 800220a:	4463      	add	r3, ip
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	e0bc      	b.n	800238c <UART_SetConfig+0x260>
 8002212:	2313      	movs	r3, #19
 8002214:	2218      	movs	r2, #24
 8002216:	4694      	mov	ip, r2
 8002218:	44bc      	add	ip, r7
 800221a:	4463      	add	r3, ip
 800221c:	2202      	movs	r2, #2
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	e0b4      	b.n	800238c <UART_SetConfig+0x260>
 8002222:	2313      	movs	r3, #19
 8002224:	2218      	movs	r2, #24
 8002226:	4694      	mov	ip, r2
 8002228:	44bc      	add	ip, r7
 800222a:	4463      	add	r3, ip
 800222c:	2204      	movs	r2, #4
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e0ac      	b.n	800238c <UART_SetConfig+0x260>
 8002232:	2313      	movs	r3, #19
 8002234:	2218      	movs	r2, #24
 8002236:	4694      	mov	ip, r2
 8002238:	44bc      	add	ip, r7
 800223a:	4463      	add	r3, ip
 800223c:	2208      	movs	r2, #8
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e0a4      	b.n	800238c <UART_SetConfig+0x260>
 8002242:	2313      	movs	r3, #19
 8002244:	2218      	movs	r2, #24
 8002246:	4694      	mov	ip, r2
 8002248:	44bc      	add	ip, r7
 800224a:	4463      	add	r3, ip
 800224c:	2210      	movs	r2, #16
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	e09b      	b.n	800238c <UART_SetConfig+0x260>
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a9b      	ldr	r2, [pc, #620]	; (80024c8 <UART_SetConfig+0x39c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d137      	bne.n	80022ce <UART_SetConfig+0x1a2>
 800225e:	4b99      	ldr	r3, [pc, #612]	; (80024c4 <UART_SetConfig+0x398>)
 8002260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002262:	220c      	movs	r2, #12
 8002264:	4013      	ands	r3, r2
 8002266:	2b04      	cmp	r3, #4
 8002268:	d018      	beq.n	800229c <UART_SetConfig+0x170>
 800226a:	d802      	bhi.n	8002272 <UART_SetConfig+0x146>
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <UART_SetConfig+0x150>
 8002270:	e024      	b.n	80022bc <UART_SetConfig+0x190>
 8002272:	2b08      	cmp	r3, #8
 8002274:	d00a      	beq.n	800228c <UART_SetConfig+0x160>
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d018      	beq.n	80022ac <UART_SetConfig+0x180>
 800227a:	e01f      	b.n	80022bc <UART_SetConfig+0x190>
 800227c:	2313      	movs	r3, #19
 800227e:	2218      	movs	r2, #24
 8002280:	4694      	mov	ip, r2
 8002282:	44bc      	add	ip, r7
 8002284:	4463      	add	r3, ip
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e07f      	b.n	800238c <UART_SetConfig+0x260>
 800228c:	2313      	movs	r3, #19
 800228e:	2218      	movs	r2, #24
 8002290:	4694      	mov	ip, r2
 8002292:	44bc      	add	ip, r7
 8002294:	4463      	add	r3, ip
 8002296:	2202      	movs	r2, #2
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e077      	b.n	800238c <UART_SetConfig+0x260>
 800229c:	2313      	movs	r3, #19
 800229e:	2218      	movs	r2, #24
 80022a0:	4694      	mov	ip, r2
 80022a2:	44bc      	add	ip, r7
 80022a4:	4463      	add	r3, ip
 80022a6:	2204      	movs	r2, #4
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e06f      	b.n	800238c <UART_SetConfig+0x260>
 80022ac:	2313      	movs	r3, #19
 80022ae:	2218      	movs	r2, #24
 80022b0:	4694      	mov	ip, r2
 80022b2:	44bc      	add	ip, r7
 80022b4:	4463      	add	r3, ip
 80022b6:	2208      	movs	r2, #8
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e067      	b.n	800238c <UART_SetConfig+0x260>
 80022bc:	2313      	movs	r3, #19
 80022be:	2218      	movs	r2, #24
 80022c0:	4694      	mov	ip, r2
 80022c2:	44bc      	add	ip, r7
 80022c4:	4463      	add	r3, ip
 80022c6:	2210      	movs	r2, #16
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	e05e      	b.n	800238c <UART_SetConfig+0x260>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7e      	ldr	r2, [pc, #504]	; (80024cc <UART_SetConfig+0x3a0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d107      	bne.n	80022e8 <UART_SetConfig+0x1bc>
 80022d8:	2313      	movs	r3, #19
 80022da:	2218      	movs	r2, #24
 80022dc:	4694      	mov	ip, r2
 80022de:	44bc      	add	ip, r7
 80022e0:	4463      	add	r3, ip
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e052      	b.n	800238e <UART_SetConfig+0x262>
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a78      	ldr	r2, [pc, #480]	; (80024d0 <UART_SetConfig+0x3a4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d107      	bne.n	8002302 <UART_SetConfig+0x1d6>
 80022f2:	2313      	movs	r3, #19
 80022f4:	2218      	movs	r2, #24
 80022f6:	4694      	mov	ip, r2
 80022f8:	44bc      	add	ip, r7
 80022fa:	4463      	add	r3, ip
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	e045      	b.n	800238e <UART_SetConfig+0x262>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a6c      	ldr	r2, [pc, #432]	; (80024b8 <UART_SetConfig+0x38c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d140      	bne.n	800238e <UART_SetConfig+0x262>
 800230c:	4b6d      	ldr	r3, [pc, #436]	; (80024c4 <UART_SetConfig+0x398>)
 800230e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002310:	23c0      	movs	r3, #192	; 0xc0
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	4013      	ands	r3, r2
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	00d2      	lsls	r2, r2, #3
 800231a:	4293      	cmp	r3, r2
 800231c:	d01f      	beq.n	800235e <UART_SetConfig+0x232>
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	00d2      	lsls	r2, r2, #3
 8002322:	4293      	cmp	r3, r2
 8002324:	d802      	bhi.n	800232c <UART_SetConfig+0x200>
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <UART_SetConfig+0x212>
 800232a:	e028      	b.n	800237e <UART_SetConfig+0x252>
 800232c:	2280      	movs	r2, #128	; 0x80
 800232e:	0112      	lsls	r2, r2, #4
 8002330:	4293      	cmp	r3, r2
 8002332:	d00c      	beq.n	800234e <UART_SetConfig+0x222>
 8002334:	22c0      	movs	r2, #192	; 0xc0
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	4293      	cmp	r3, r2
 800233a:	d018      	beq.n	800236e <UART_SetConfig+0x242>
 800233c:	e01f      	b.n	800237e <UART_SetConfig+0x252>
 800233e:	2313      	movs	r3, #19
 8002340:	2218      	movs	r2, #24
 8002342:	4694      	mov	ip, r2
 8002344:	44bc      	add	ip, r7
 8002346:	4463      	add	r3, ip
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e01e      	b.n	800238c <UART_SetConfig+0x260>
 800234e:	2313      	movs	r3, #19
 8002350:	2218      	movs	r2, #24
 8002352:	4694      	mov	ip, r2
 8002354:	44bc      	add	ip, r7
 8002356:	4463      	add	r3, ip
 8002358:	2202      	movs	r2, #2
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	e016      	b.n	800238c <UART_SetConfig+0x260>
 800235e:	2313      	movs	r3, #19
 8002360:	2218      	movs	r2, #24
 8002362:	4694      	mov	ip, r2
 8002364:	44bc      	add	ip, r7
 8002366:	4463      	add	r3, ip
 8002368:	2204      	movs	r2, #4
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e00e      	b.n	800238c <UART_SetConfig+0x260>
 800236e:	2313      	movs	r3, #19
 8002370:	2218      	movs	r2, #24
 8002372:	4694      	mov	ip, r2
 8002374:	44bc      	add	ip, r7
 8002376:	4463      	add	r3, ip
 8002378:	2208      	movs	r2, #8
 800237a:	701a      	strb	r2, [r3, #0]
 800237c:	e006      	b.n	800238c <UART_SetConfig+0x260>
 800237e:	2313      	movs	r3, #19
 8002380:	2218      	movs	r2, #24
 8002382:	4694      	mov	ip, r2
 8002384:	44bc      	add	ip, r7
 8002386:	4463      	add	r3, ip
 8002388:	2210      	movs	r2, #16
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	46c0      	nop			; (mov r8, r8)
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 800238e:	2002      	movs	r0, #2
 8002390:	f7ff fabc 	bl	800190c <HAL_RCCEx_GetPeriphCLKFreq>
 8002394:	0003      	movs	r3, r0
 8002396:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a46      	ldr	r2, [pc, #280]	; (80024b8 <UART_SetConfig+0x38c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d000      	beq.n	80023a4 <UART_SetConfig+0x278>
 80023a2:	e09f      	b.n	80024e4 <UART_SetConfig+0x3b8>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (clocksource)
 80023a8:	2313      	movs	r3, #19
 80023aa:	2218      	movs	r2, #24
 80023ac:	4694      	mov	ip, r2
 80023ae:	44bc      	add	ip, r7
 80023b0:	4463      	add	r3, ip
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d00d      	beq.n	80023d4 <UART_SetConfig+0x2a8>
 80023b8:	dc02      	bgt.n	80023c0 <UART_SetConfig+0x294>
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <UART_SetConfig+0x29e>
 80023be:	e01d      	b.n	80023fc <UART_SetConfig+0x2d0>
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d012      	beq.n	80023ea <UART_SetConfig+0x2be>
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d015      	beq.n	80023f4 <UART_SetConfig+0x2c8>
 80023c8:	e018      	b.n	80023fc <UART_SetConfig+0x2d0>
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 80023ca:	f7ff fa1b 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 80023ce:	0003      	movs	r3, r0
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80023d2:	e01b      	b.n	800240c <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023d4:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <UART_SetConfig+0x398>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2210      	movs	r2, #16
 80023da:	4013      	ands	r3, r2
 80023dc:	d002      	beq.n	80023e4 <UART_SetConfig+0x2b8>
      {
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 80023de:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <UART_SetConfig+0x3a8>)
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      else
      {
        tmpreg = (uint32_t) HSI_VALUE;
      }
      break;
 80023e2:	e013      	b.n	800240c <UART_SetConfig+0x2e0>
        tmpreg = (uint32_t) HSI_VALUE;
 80023e4:	4b3c      	ldr	r3, [pc, #240]	; (80024d8 <UART_SetConfig+0x3ac>)
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80023e8:	e010      	b.n	800240c <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 80023ea:	f7ff f983 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 80023ee:	0003      	movs	r3, r0
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80023f2:	e00b      	b.n	800240c <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80023fa:	e007      	b.n	800240c <UART_SetConfig+0x2e0>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80023fc:	230f      	movs	r3, #15
 80023fe:	2218      	movs	r2, #24
 8002400:	4694      	mov	ip, r2
 8002402:	44bc      	add	ip, r7
 8002404:	4463      	add	r3, ip
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
      break;
 800240a:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d100      	bne.n	8002414 <UART_SetConfig+0x2e8>
 8002412:	e1c0      	b.n	8002796 <UART_SetConfig+0x66a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	0013      	movs	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	189a      	adds	r2, r3, r2
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	429a      	cmp	r2, r3
 8002422:	d805      	bhi.n	8002430 <UART_SetConfig+0x304>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	429a      	cmp	r2, r3
 800242e:	d207      	bcs.n	8002440 <UART_SetConfig+0x314>
      {
        ret = HAL_ERROR;
 8002430:	230f      	movs	r3, #15
 8002432:	2218      	movs	r2, #24
 8002434:	4694      	mov	ip, r2
 8002436:	44bc      	add	ip, r7
 8002438:	4463      	add	r3, ip
 800243a:	2201      	movs	r2, #1
 800243c:	701a      	strb	r2, [r3, #0]
 800243e:	e1aa      	b.n	8002796 <UART_SetConfig+0x66a>
      }
      else
      {
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	6939      	ldr	r1, [r7, #16]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	000b      	movs	r3, r1
 800244e:	0e1b      	lsrs	r3, r3, #24
 8002450:	0010      	movs	r0, r2
 8002452:	0205      	lsls	r5, r0, #8
 8002454:	431d      	orrs	r5, r3
 8002456:	000b      	movs	r3, r1
 8002458:	021c      	lsls	r4, r3, #8
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68b8      	ldr	r0, [r7, #8]
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	1900      	adds	r0, r0, r4
 800246c:	4169      	adcs	r1, r5
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	2300      	movs	r3, #0
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f7fd ffc2 	bl	8000404 <__aeabi_uldivmod>
 8002480:	0003      	movs	r3, r0
 8002482:	000c      	movs	r4, r1
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8002486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <UART_SetConfig+0x3b0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d908      	bls.n	80024a0 <UART_SetConfig+0x374>
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <UART_SetConfig+0x3b4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d804      	bhi.n	80024a0 <UART_SetConfig+0x374>
        {
           huart->Instance->BRR = tmpreg;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	e17a      	b.n	8002796 <UART_SetConfig+0x66a>
        }
        else
        {
          ret = HAL_ERROR;
 80024a0:	230f      	movs	r3, #15
 80024a2:	2218      	movs	r2, #24
 80024a4:	4694      	mov	ip, r2
 80024a6:	44bc      	add	ip, r7
 80024a8:	4463      	add	r3, ip
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	e172      	b.n	8002796 <UART_SetConfig+0x66a>
 80024b0:	efff69f3 	.word	0xefff69f3
 80024b4:	ffffcfff 	.word	0xffffcfff
 80024b8:	40004800 	.word	0x40004800
 80024bc:	fffff4ff 	.word	0xfffff4ff
 80024c0:	40013800 	.word	0x40013800
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40004400 	.word	0x40004400
 80024cc:	40004c00 	.word	0x40004c00
 80024d0:	40005000 	.word	0x40005000
 80024d4:	003d0900 	.word	0x003d0900
 80024d8:	00f42400 	.word	0x00f42400
 80024dc:	000002ff 	.word	0x000002ff
 80024e0:	000fffff 	.word	0x000fffff
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d000      	beq.n	80024f2 <UART_SetConfig+0x3c6>
 80024f0:	e0ca      	b.n	8002688 <UART_SetConfig+0x55c>
  {
    switch (clocksource)
 80024f2:	2313      	movs	r3, #19
 80024f4:	2218      	movs	r2, #24
 80024f6:	4694      	mov	ip, r2
 80024f8:	44bc      	add	ip, r7
 80024fa:	4463      	add	r3, ip
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d900      	bls.n	8002504 <UART_SetConfig+0x3d8>
 8002502:	e089      	b.n	8002618 <UART_SetConfig+0x4ec>
 8002504:	009a      	lsls	r2, r3, #2
 8002506:	4ba9      	ldr	r3, [pc, #676]	; (80027ac <UART_SetConfig+0x680>)
 8002508:	18d3      	adds	r3, r2, r3
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	005a      	lsls	r2, r3, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	085b      	lsrs	r3, r3, #1
 8002518:	18d2      	adds	r2, r2, r3
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	0019      	movs	r1, r3
 8002520:	0010      	movs	r0, r2
 8002522:	f7fd fdf9 	bl	8000118 <__udivsi3>
 8002526:	0003      	movs	r3, r0
 8002528:	001a      	movs	r2, r3
 800252a:	2310      	movs	r3, #16
 800252c:	2118      	movs	r1, #24
 800252e:	468c      	mov	ip, r1
 8002530:	44bc      	add	ip, r7
 8002532:	4463      	add	r3, ip
 8002534:	801a      	strh	r2, [r3, #0]
      break;
 8002536:	e077      	b.n	8002628 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002538:	f7ff f97a 	bl	8001830 <HAL_RCC_GetPCLK2Freq>
 800253c:	0003      	movs	r3, r0
 800253e:	005a      	lsls	r2, r3, #1
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	085b      	lsrs	r3, r3, #1
 8002546:	18d2      	adds	r2, r2, r3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	0019      	movs	r1, r3
 800254e:	0010      	movs	r0, r2
 8002550:	f7fd fde2 	bl	8000118 <__udivsi3>
 8002554:	0003      	movs	r3, r0
 8002556:	001a      	movs	r2, r3
 8002558:	2310      	movs	r3, #16
 800255a:	2118      	movs	r1, #24
 800255c:	468c      	mov	ip, r1
 800255e:	44bc      	add	ip, r7
 8002560:	4463      	add	r3, ip
 8002562:	801a      	strh	r2, [r3, #0]
      break;
 8002564:	e060      	b.n	8002628 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002566:	4b92      	ldr	r3, [pc, #584]	; (80027b0 <UART_SetConfig+0x684>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2210      	movs	r2, #16
 800256c:	4013      	ands	r3, r2
 800256e:	d013      	beq.n	8002598 <UART_SetConfig+0x46c>
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	4a8f      	ldr	r2, [pc, #572]	; (80027b4 <UART_SetConfig+0x688>)
 8002578:	189a      	adds	r2, r3, r2
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	0019      	movs	r1, r3
 8002580:	0010      	movs	r0, r2
 8002582:	f7fd fdc9 	bl	8000118 <__udivsi3>
 8002586:	0003      	movs	r3, r0
 8002588:	001a      	movs	r2, r3
 800258a:	2310      	movs	r3, #16
 800258c:	2118      	movs	r1, #24
 800258e:	468c      	mov	ip, r1
 8002590:	44bc      	add	ip, r7
 8002592:	4463      	add	r3, ip
 8002594:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
      }
      break;
 8002596:	e047      	b.n	8002628 <UART_SetConfig+0x4fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	085b      	lsrs	r3, r3, #1
 800259e:	4a86      	ldr	r2, [pc, #536]	; (80027b8 <UART_SetConfig+0x68c>)
 80025a0:	189a      	adds	r2, r3, r2
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	0019      	movs	r1, r3
 80025a8:	0010      	movs	r0, r2
 80025aa:	f7fd fdb5 	bl	8000118 <__udivsi3>
 80025ae:	0003      	movs	r3, r0
 80025b0:	001a      	movs	r2, r3
 80025b2:	2310      	movs	r3, #16
 80025b4:	2118      	movs	r1, #24
 80025b6:	468c      	mov	ip, r1
 80025b8:	44bc      	add	ip, r7
 80025ba:	4463      	add	r3, ip
 80025bc:	801a      	strh	r2, [r3, #0]
      break;
 80025be:	e033      	b.n	8002628 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025c0:	f7ff f898 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 80025c4:	0003      	movs	r3, r0
 80025c6:	005a      	lsls	r2, r3, #1
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	18d2      	adds	r2, r2, r3
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	0019      	movs	r1, r3
 80025d6:	0010      	movs	r0, r2
 80025d8:	f7fd fd9e 	bl	8000118 <__udivsi3>
 80025dc:	0003      	movs	r3, r0
 80025de:	001a      	movs	r2, r3
 80025e0:	2310      	movs	r3, #16
 80025e2:	2118      	movs	r1, #24
 80025e4:	468c      	mov	ip, r1
 80025e6:	44bc      	add	ip, r7
 80025e8:	4463      	add	r3, ip
 80025ea:	801a      	strh	r2, [r3, #0]
      break;
 80025ec:	e01c      	b.n	8002628 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	2280      	movs	r2, #128	; 0x80
 80025f6:	0252      	lsls	r2, r2, #9
 80025f8:	189a      	adds	r2, r3, r2
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	0019      	movs	r1, r3
 8002600:	0010      	movs	r0, r2
 8002602:	f7fd fd89 	bl	8000118 <__udivsi3>
 8002606:	0003      	movs	r3, r0
 8002608:	001a      	movs	r2, r3
 800260a:	2310      	movs	r3, #16
 800260c:	2118      	movs	r1, #24
 800260e:	468c      	mov	ip, r1
 8002610:	44bc      	add	ip, r7
 8002612:	4463      	add	r3, ip
 8002614:	801a      	strh	r2, [r3, #0]
      break;
 8002616:	e007      	b.n	8002628 <UART_SetConfig+0x4fc>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002618:	230f      	movs	r3, #15
 800261a:	2218      	movs	r2, #24
 800261c:	4694      	mov	ip, r2
 800261e:	44bc      	add	ip, r7
 8002620:	4463      	add	r3, ip
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
      break;
 8002626:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002628:	230c      	movs	r3, #12
 800262a:	2218      	movs	r2, #24
 800262c:	4694      	mov	ip, r2
 800262e:	44bc      	add	ip, r7
 8002630:	4463      	add	r3, ip
 8002632:	2210      	movs	r2, #16
 8002634:	2118      	movs	r1, #24
 8002636:	468c      	mov	ip, r1
 8002638:	44bc      	add	ip, r7
 800263a:	4462      	add	r2, ip
 800263c:	8812      	ldrh	r2, [r2, #0]
 800263e:	210f      	movs	r1, #15
 8002640:	438a      	bics	r2, r1
 8002642:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8002644:	2310      	movs	r3, #16
 8002646:	2218      	movs	r2, #24
 8002648:	4694      	mov	ip, r2
 800264a:	44bc      	add	ip, r7
 800264c:	4463      	add	r3, ip
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	105b      	asrs	r3, r3, #1
 8002652:	b29b      	uxth	r3, r3
 8002654:	2207      	movs	r2, #7
 8002656:	4013      	ands	r3, r2
 8002658:	b299      	uxth	r1, r3
 800265a:	230c      	movs	r3, #12
 800265c:	2218      	movs	r2, #24
 800265e:	4694      	mov	ip, r2
 8002660:	44bc      	add	ip, r7
 8002662:	4463      	add	r3, ip
 8002664:	220c      	movs	r2, #12
 8002666:	2018      	movs	r0, #24
 8002668:	4684      	mov	ip, r0
 800266a:	44bc      	add	ip, r7
 800266c:	4462      	add	r2, ip
 800266e:	8812      	ldrh	r2, [r2, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	220c      	movs	r2, #12
 800267a:	2118      	movs	r1, #24
 800267c:	468c      	mov	ip, r1
 800267e:	44bc      	add	ip, r7
 8002680:	4462      	add	r2, ip
 8002682:	8812      	ldrh	r2, [r2, #0]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	e086      	b.n	8002796 <UART_SetConfig+0x66a>
  }
  else
  {
    switch (clocksource)
 8002688:	2313      	movs	r3, #19
 800268a:	2218      	movs	r2, #24
 800268c:	4694      	mov	ip, r2
 800268e:	44bc      	add	ip, r7
 8002690:	4463      	add	r3, ip
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d876      	bhi.n	8002786 <UART_SetConfig+0x65a>
 8002698:	009a      	lsls	r2, r3, #2
 800269a:	4b48      	ldr	r3, [pc, #288]	; (80027bc <UART_SetConfig+0x690>)
 800269c:	18d3      	adds	r3, r2, r3
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	469f      	mov	pc, r3
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	681c      	ldr	r4, [r3, #0]
 80026a6:	f7ff f8ad 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 80026aa:	0002      	movs	r2, r0
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	18d2      	adds	r2, r2, r3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	0019      	movs	r1, r3
 80026ba:	0010      	movs	r0, r2
 80026bc:	f7fd fd2c 	bl	8000118 <__udivsi3>
 80026c0:	0003      	movs	r3, r0
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	60e3      	str	r3, [r4, #12]
      break;
 80026c6:	e066      	b.n	8002796 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	681c      	ldr	r4, [r3, #0]
 80026cc:	f7ff f8b0 	bl	8001830 <HAL_RCC_GetPCLK2Freq>
 80026d0:	0002      	movs	r2, r0
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	18d2      	adds	r2, r2, r3
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0019      	movs	r1, r3
 80026e0:	0010      	movs	r0, r2
 80026e2:	f7fd fd19 	bl	8000118 <__udivsi3>
 80026e6:	0003      	movs	r3, r0
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	60e3      	str	r3, [r4, #12]
      break;
 80026ec:	e053      	b.n	8002796 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026ee:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <UART_SetConfig+0x684>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2210      	movs	r2, #16
 80026f4:	4013      	ands	r3, r2
 80026f6:	d010      	beq.n	800271a <UART_SetConfig+0x5ee>
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	681c      	ldr	r4, [r3, #0]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	4a2f      	ldr	r2, [pc, #188]	; (80027c0 <UART_SetConfig+0x694>)
 8002704:	189a      	adds	r2, r3, r2
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	0019      	movs	r1, r3
 800270c:	0010      	movs	r0, r2
 800270e:	f7fd fd03 	bl	8000118 <__udivsi3>
 8002712:	0003      	movs	r3, r0
 8002714:	b29b      	uxth	r3, r3
 8002716:	60e3      	str	r3, [r4, #12]
      }
      else
      {
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
      }
      break;
 8002718:	e03d      	b.n	8002796 <UART_SetConfig+0x66a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	681c      	ldr	r4, [r3, #0]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <UART_SetConfig+0x698>)
 8002726:	189a      	adds	r2, r3, r2
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	0019      	movs	r1, r3
 800272e:	0010      	movs	r0, r2
 8002730:	f7fd fcf2 	bl	8000118 <__udivsi3>
 8002734:	0003      	movs	r3, r0
 8002736:	b29b      	uxth	r3, r3
 8002738:	60e3      	str	r3, [r4, #12]
      break;
 800273a:	e02c      	b.n	8002796 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	681c      	ldr	r4, [r3, #0]
 8002740:	f7fe ffd8 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 8002744:	0002      	movs	r2, r0
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	18d2      	adds	r2, r2, r3
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	0019      	movs	r1, r3
 8002754:	0010      	movs	r0, r2
 8002756:	f7fd fcdf 	bl	8000118 <__udivsi3>
 800275a:	0003      	movs	r3, r0
 800275c:	b29b      	uxth	r3, r3
 800275e:	60e3      	str	r3, [r4, #12]
      break;
 8002760:	e019      	b.n	8002796 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	681c      	ldr	r4, [r3, #0]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	2280      	movs	r2, #128	; 0x80
 800276e:	0212      	lsls	r2, r2, #8
 8002770:	189a      	adds	r2, r3, r2
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	0019      	movs	r1, r3
 8002778:	0010      	movs	r0, r2
 800277a:	f7fd fccd 	bl	8000118 <__udivsi3>
 800277e:	0003      	movs	r3, r0
 8002780:	b29b      	uxth	r3, r3
 8002782:	60e3      	str	r3, [r4, #12]
      break;
 8002784:	e007      	b.n	8002796 <UART_SetConfig+0x66a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002786:	230f      	movs	r3, #15
 8002788:	2218      	movs	r2, #24
 800278a:	4694      	mov	ip, r2
 800278c:	44bc      	add	ip, r7
 800278e:	4463      	add	r3, ip
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
      break;
 8002794:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8002796:	230f      	movs	r3, #15
 8002798:	2218      	movs	r2, #24
 800279a:	4694      	mov	ip, r2
 800279c:	44bc      	add	ip, r7
 800279e:	4463      	add	r3, ip
 80027a0:	781b      	ldrb	r3, [r3, #0]

}
 80027a2:	0018      	movs	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b00c      	add	sp, #48	; 0x30
 80027a8:	bdb0      	pop	{r4, r5, r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	08003628 	.word	0x08003628
 80027b0:	40021000 	.word	0x40021000
 80027b4:	007a1200 	.word	0x007a1200
 80027b8:	01e84800 	.word	0x01e84800
 80027bc:	0800364c 	.word	0x0800364c
 80027c0:	003d0900 	.word	0x003d0900
 80027c4:	00f42400 	.word	0x00f42400

080027c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	2201      	movs	r2, #1
 80027d6:	4013      	ands	r3, r2
 80027d8:	d00a      	beq.n	80027f0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	6852      	ldr	r2, [r2, #4]
 80027e4:	4945      	ldr	r1, [pc, #276]	; (80028fc <UART_AdvFeatureConfig+0x134>)
 80027e6:	4011      	ands	r1, r2
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	2202      	movs	r2, #2
 80027f6:	4013      	ands	r3, r2
 80027f8:	d00a      	beq.n	8002810 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	6852      	ldr	r2, [r2, #4]
 8002804:	493e      	ldr	r1, [pc, #248]	; (8002900 <UART_AdvFeatureConfig+0x138>)
 8002806:	4011      	ands	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800280c:	430a      	orrs	r2, r1
 800280e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	2204      	movs	r2, #4
 8002816:	4013      	ands	r3, r2
 8002818:	d00a      	beq.n	8002830 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	6852      	ldr	r2, [r2, #4]
 8002824:	4937      	ldr	r1, [pc, #220]	; (8002904 <UART_AdvFeatureConfig+0x13c>)
 8002826:	4011      	ands	r1, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800282c:	430a      	orrs	r2, r1
 800282e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2208      	movs	r2, #8
 8002836:	4013      	ands	r3, r2
 8002838:	d00a      	beq.n	8002850 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	6852      	ldr	r2, [r2, #4]
 8002844:	4930      	ldr	r1, [pc, #192]	; (8002908 <UART_AdvFeatureConfig+0x140>)
 8002846:	4011      	ands	r1, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	2210      	movs	r2, #16
 8002856:	4013      	ands	r3, r2
 8002858:	d00a      	beq.n	8002870 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6812      	ldr	r2, [r2, #0]
 8002862:	6892      	ldr	r2, [r2, #8]
 8002864:	4929      	ldr	r1, [pc, #164]	; (800290c <UART_AdvFeatureConfig+0x144>)
 8002866:	4011      	ands	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800286c:	430a      	orrs	r2, r1
 800286e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	2220      	movs	r2, #32
 8002876:	4013      	ands	r3, r2
 8002878:	d00a      	beq.n	8002890 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	6892      	ldr	r2, [r2, #8]
 8002884:	4922      	ldr	r1, [pc, #136]	; (8002910 <UART_AdvFeatureConfig+0x148>)
 8002886:	4011      	ands	r1, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800288c:	430a      	orrs	r2, r1
 800288e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2240      	movs	r2, #64	; 0x40
 8002896:	4013      	ands	r3, r2
 8002898:	d01b      	beq.n	80028d2 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	6852      	ldr	r2, [r2, #4]
 80028a4:	491b      	ldr	r1, [pc, #108]	; (8002914 <UART_AdvFeatureConfig+0x14c>)
 80028a6:	4011      	ands	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028ac:	430a      	orrs	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	035b      	lsls	r3, r3, #13
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d10a      	bne.n	80028d2 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	6852      	ldr	r2, [r2, #4]
 80028c6:	4914      	ldr	r1, [pc, #80]	; (8002918 <UART_AdvFeatureConfig+0x150>)
 80028c8:	4011      	ands	r1, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	4013      	ands	r3, r2
 80028da:	d00a      	beq.n	80028f2 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	6852      	ldr	r2, [r2, #4]
 80028e6:	490d      	ldr	r1, [pc, #52]	; (800291c <UART_AdvFeatureConfig+0x154>)
 80028e8:	4011      	ands	r1, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
  }
}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b002      	add	sp, #8
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	fffdffff 	.word	0xfffdffff
 8002900:	fffeffff 	.word	0xfffeffff
 8002904:	fffbffff 	.word	0xfffbffff
 8002908:	ffff7fff 	.word	0xffff7fff
 800290c:	ffffefff 	.word	0xffffefff
 8002910:	ffffdfff 	.word	0xffffdfff
 8002914:	ffefffff 	.word	0xffefffff
 8002918:	ff9fffff 	.word	0xff9fffff
 800291c:	fff7ffff 	.word	0xfff7ffff

08002920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af02      	add	r7, sp, #8
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002932:	f7fd feb5 	bl	80006a0 <HAL_GetTick>
 8002936:	0003      	movs	r3, r0
 8002938:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2208      	movs	r2, #8
 8002942:	4013      	ands	r3, r2
 8002944:	2b08      	cmp	r3, #8
 8002946:	d10d      	bne.n	8002964 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	2380      	movs	r3, #128	; 0x80
 800294c:	0399      	lsls	r1, r3, #14
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <UART_CheckIdleState+0x90>)
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	0013      	movs	r3, r2
 8002956:	2200      	movs	r2, #0
 8002958:	f000 f82c 	bl	80029b4 <UART_WaitOnFlagUntilTimeout>
 800295c:	1e03      	subs	r3, r0, #0
 800295e:	d001      	beq.n	8002964 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e021      	b.n	80029a8 <UART_CheckIdleState+0x88>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2204      	movs	r2, #4
 800296c:	4013      	ands	r3, r2
 800296e:	2b04      	cmp	r3, #4
 8002970:	d10d      	bne.n	800298e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	03d9      	lsls	r1, r3, #15
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <UART_CheckIdleState+0x90>)
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	0013      	movs	r3, r2
 8002980:	2200      	movs	r2, #0
 8002982:	f000 f817 	bl	80029b4 <UART_WaitOnFlagUntilTimeout>
 8002986:	1e03      	subs	r3, r0, #0
 8002988:	d001      	beq.n	800298e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e00c      	b.n	80029a8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2269      	movs	r2, #105	; 0x69
 8002992:	2120      	movs	r1, #32
 8002994:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	226a      	movs	r2, #106	; 0x6a
 800299a:	2120      	movs	r1, #32
 800299c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2268      	movs	r2, #104	; 0x68
 80029a2:	2100      	movs	r1, #0
 80029a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	0018      	movs	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b004      	add	sp, #16
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	01ffffff 	.word	0x01ffffff

080029b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	1dfb      	adds	r3, r7, #7
 80029c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c4:	e02b      	b.n	8002a1e <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	3301      	adds	r3, #1
 80029ca:	d028      	beq.n	8002a1e <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80029d2:	f7fd fe65 	bl	80006a0 <HAL_GetTick>
 80029d6:	0002      	movs	r2, r0
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	1ad2      	subs	r2, r2, r3
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d91d      	bls.n	8002a1e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	4916      	ldr	r1, [pc, #88]	; (8002a48 <UART_WaitOnFlagUntilTimeout+0x94>)
 80029ee:	400a      	ands	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	6892      	ldr	r2, [r2, #8]
 80029fc:	2101      	movs	r1, #1
 80029fe:	438a      	bics	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2269      	movs	r2, #105	; 0x69
 8002a06:	2120      	movs	r1, #32
 8002a08:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	226a      	movs	r2, #106	; 0x6a
 8002a0e:	2120      	movs	r1, #32
 8002a10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2268      	movs	r2, #104	; 0x68
 8002a16:	2100      	movs	r1, #0
 8002a18:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e00f      	b.n	8002a3e <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	401a      	ands	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	425a      	negs	r2, r3
 8002a2e:	4153      	adcs	r3, r2
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	001a      	movs	r2, r3
 8002a34:	1dfb      	adds	r3, r7, #7
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d0c4      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b004      	add	sp, #16
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	fffffe5f 	.word	0xfffffe5f

08002a4c <PWM_Init>:

} Commands_t;


void PWM_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	2202      	movs	r2, #2
 8002a56:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode =GPIO_MODE_AF_PP;
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull =GPIO_PULLUP;
 8002a5e:	1d3b      	adds	r3, r7, #4
 8002a60:	2201      	movs	r2, #1
 8002a62:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	2203      	movs	r2, #3
 8002a68:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate= GPIO_AF2_TIM2;
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a70:	1d3a      	adds	r2, r7, #4
 8002a72:	23a0      	movs	r3, #160	; 0xa0
 8002a74:	05db      	lsls	r3, r3, #23
 8002a76:	0011      	movs	r1, r2
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7fd ffe3 	bl	8000a44 <HAL_GPIO_Init>


	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <PWM_Init+0xa0>)
 8002a80:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <PWM_Init+0xa0>)
 8002a82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a84:	2101      	movs	r1, #1
 8002a86:	430a      	orrs	r2, r1
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38

	//set TIM2 prescaler to 10kHz clock
	//1CNT in ARR == 0.05 ms
	TIM2->PSC = 99;
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	05db      	lsls	r3, r3, #23
 8002a8e:	2263      	movs	r2, #99	; 0x63
 8002a90:	629a      	str	r2, [r3, #40]	; 0x28

	//set TIM2 CNT overflow -- frequency 1/(0.00005 * ARR) = 200
	TIM2->ARR = 100;
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	05db      	lsls	r3, r3, #23
 8002a96:	2264      	movs	r2, #100	; 0x64
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c
		//255 == 51 ms == 19.6 Hz



	//enable mux pins TIM2_CH2 and TIM2_CH3 in output compare mode
	TIM2->CCER |= TIM_CCER_CC2E;
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	05db      	lsls	r3, r3, #23
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	05d2      	lsls	r2, r2, #23
 8002aa2:	6a12      	ldr	r2, [r2, #32]
 8002aa4:	2110      	movs	r1, #16
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	621a      	str	r2, [r3, #32]
	//set the compare level
	TIM2-> CCR2 = 0;
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	05db      	lsls	r3, r3, #23
 8002aae:	2200      	movs	r2, #0
 8002ab0:	639a      	str	r2, [r3, #56]	; 0x38

	//set OC1M to 110 to PWM mode 1
	TIM2->CCMR1 &= ~TIM_CCMR1_OC2M;
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	05db      	lsls	r3, r3, #23
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	05d2      	lsls	r2, r2, #23
 8002aba:	6992      	ldr	r2, [r2, #24]
 8002abc:	490c      	ldr	r1, [pc, #48]	; (8002af0 <PWM_Init+0xa4>)
 8002abe:	400a      	ands	r2, r1
 8002ac0:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1);
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	05db      	lsls	r3, r3, #23
 8002ac6:	2280      	movs	r2, #128	; 0x80
 8002ac8:	05d2      	lsls	r2, r2, #23
 8002aca:	6992      	ldr	r2, [r2, #24]
 8002acc:	21c0      	movs	r1, #192	; 0xc0
 8002ace:	01c9      	lsls	r1, r1, #7
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	619a      	str	r2, [r3, #24]
	TIM2->CR1 |= TIM_CR1_CEN;
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	05db      	lsls	r3, r3, #23
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	05d2      	lsls	r2, r2, #23
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	2101      	movs	r1, #1
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b006      	add	sp, #24
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	ffff8fff 	.word	0xffff8fff

08002af4 <GPIO_Init>:




void GPIO_Init(){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef  GPIO_InitStruct;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	4b31      	ldr	r3, [pc, #196]	; (8002bc0 <GPIO_Init+0xcc>)
 8002afc:	4a30      	ldr	r2, [pc, #192]	; (8002bc0 <GPIO_Init+0xcc>)
 8002afe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b00:	2101      	movs	r1, #1
 8002b02:	430a      	orrs	r2, r1
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <GPIO_Init+0xcc>)
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002b12:	4b2b      	ldr	r3, [pc, #172]	; (8002bc0 <GPIO_Init+0xcc>)
 8002b14:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <GPIO_Init+0xcc>)
 8002b16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b18:	2102      	movs	r1, #2
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b1e:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <GPIO_Init+0xcc>)
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	2202      	movs	r2, #2
 8002b24:	4013      	ands	r3, r2
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2a:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <GPIO_Init+0xcc>)
 8002b2c:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <GPIO_Init+0xcc>)
 8002b2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b30:	2104      	movs	r1, #4
 8002b32:	430a      	orrs	r2, r1
 8002b34:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b36:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <GPIO_Init+0xcc>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]

	/* Configure the GPIO_LED pin */
	GPIO_InitStruct.Pin = LED_PIN_INNER;
 8002b42:	230c      	movs	r3, #12
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	2220      	movs	r2, #32
 8002b48:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4a:	230c      	movs	r3, #12
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	2201      	movs	r2, #1
 8002b50:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b52:	230c      	movs	r3, #12
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	2201      	movs	r2, #1
 8002b58:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5a:	230c      	movs	r3, #12
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	2203      	movs	r2, #3
 8002b60:	60da      	str	r2, [r3, #12]
	//HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


	/* Configure the MOTOR output pins */
	GPIO_InitStruct.Pin = MOTA_DIR;
 8002b62:	230c      	movs	r3, #12
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	2240      	movs	r2, #64	; 0x40
 8002b68:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(MOTA_DIR_GPIO, &GPIO_InitStruct);
 8002b6a:	230c      	movs	r3, #12
 8002b6c:	18fa      	adds	r2, r7, r3
 8002b6e:	23a0      	movs	r3, #160	; 0xa0
 8002b70:	05db      	lsls	r3, r3, #23
 8002b72:	0011      	movs	r1, r2
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7fd ff65 	bl	8000a44 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = MOTA_BREAK;
 8002b7a:	230c      	movs	r3, #12
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(MOTA_BREAK_GPIO, &GPIO_InitStruct);
 8002b82:	230c      	movs	r3, #12
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	4a0f      	ldr	r2, [pc, #60]	; (8002bc4 <GPIO_Init+0xd0>)
 8002b88:	0019      	movs	r1, r3
 8002b8a:	0010      	movs	r0, r2
 8002b8c:	f7fd ff5a 	bl	8000a44 <HAL_GPIO_Init>

	//GPIO_InitStruct.Pin = MOTA_PWM;
	//HAL_GPIO_Init(MOTA_PWM_GPIO, &GPIO_InitStruct);

	/* Configure the MOTOR input pins */
	GPIO_InitStruct.Pin = MOTA_PWM;
 8002b90:	230c      	movs	r3, #12
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	2208      	movs	r2, #8
 8002b96:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b98:	230c      	movs	r3, #12
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ba0:	230c      	movs	r3, #12
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(MOTA_PWM_GPIO, &GPIO_InitStruct);
 8002ba8:	230c      	movs	r3, #12
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	4a06      	ldr	r2, [pc, #24]	; (8002bc8 <GPIO_Init+0xd4>)
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f7fd ff47 	bl	8000a44 <HAL_GPIO_Init>
}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b008      	add	sp, #32
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	50000800 	.word	0x50000800
 8002bc8:	50000400 	.word	0x50000400

08002bcc <USART2_Init>:


void USART2_Init(){
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	huart.Instance        = USART2;
 8002bd0:	4b14      	ldr	r3, [pc, #80]	; (8002c24 <USART2_Init+0x58>)
 8002bd2:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <USART2_Init+0x5c>)
 8002bd4:	601a      	str	r2, [r3, #0]
	huart.Init.BaudRate   = 115200;
 8002bd6:	4b13      	ldr	r3, [pc, #76]	; (8002c24 <USART2_Init+0x58>)
 8002bd8:	22e1      	movs	r2, #225	; 0xe1
 8002bda:	0252      	lsls	r2, r2, #9
 8002bdc:	605a      	str	r2, [r3, #4]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <USART2_Init+0x58>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
	huart.Init.StopBits   = UART_STOPBITS_1;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <USART2_Init+0x58>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
	huart.Init.Parity     = UART_PARITY_NONE;
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <USART2_Init+0x58>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
	huart.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <USART2_Init+0x58>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	619a      	str	r2, [r3, #24]
	huart.Init.Mode       = UART_MODE_TX_RX;
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <USART2_Init+0x58>)
 8002bf8:	220c      	movs	r2, #12
 8002bfa:	615a      	str	r2, [r3, #20]


	if(HAL_UART_DeInit(&huart) != HAL_OK)
 8002bfc:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <USART2_Init+0x58>)
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7ff f8d2 	bl	8001da8 <HAL_UART_DeInit>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d001      	beq.n	8002c0c <USART2_Init+0x40>
		Error_Handler();
 8002c08:	f000 f9f4 	bl	8002ff4 <Error_Handler>

	if(HAL_UART_Init(&huart) != HAL_OK)
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <USART2_Init+0x58>)
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f7ff f872 	bl	8001cf8 <HAL_UART_Init>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d001      	beq.n	8002c1c <USART2_Init+0x50>
		Error_Handler();
 8002c18:	f000 f9ec 	bl	8002ff4 <Error_Handler>

}
 8002c1c:	46c0      	nop			; (mov r8, r8)
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	2000002c 	.word	0x2000002c
 8002c28:	40004400 	.word	0x40004400

08002c2c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__GPIOA_CLK_ENABLE();
 8002c34:	4b1f      	ldr	r3, [pc, #124]	; (8002cb4 <HAL_UART_MspInit+0x88>)
 8002c36:	4a1f      	ldr	r2, [pc, #124]	; (8002cb4 <HAL_UART_MspInit+0x88>)
 8002c38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c40:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <HAL_UART_MspInit+0x88>)
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	2201      	movs	r2, #1
 8002c46:	4013      	ands	r3, r2
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
	__USART2_CLK_ENABLE();
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_UART_MspInit+0x88>)
 8002c4e:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <HAL_UART_MspInit+0x88>)
 8002c50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c52:	2180      	movs	r1, #128	; 0x80
 8002c54:	0289      	lsls	r1, r1, #10
 8002c56:	430a      	orrs	r2, r1
 8002c58:	639a      	str	r2, [r3, #56]	; 0x38
	/**USART2 GPIO Configuration
	  PA2     ------> USART2_TX
	  PA3     ------> USART2_RX
	  */
	//GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c5a:	230c      	movs	r3, #12
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	2204      	movs	r2, #4
 8002c60:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	230c      	movs	r3, #12
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	2202      	movs	r2, #2
 8002c68:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	2201      	movs	r2, #1
 8002c70:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c72:	230c      	movs	r3, #12
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	2203      	movs	r2, #3
 8002c78:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002c7a:	230c      	movs	r3, #12
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	2204      	movs	r2, #4
 8002c80:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c82:	230c      	movs	r3, #12
 8002c84:	18fa      	adds	r2, r7, r3
 8002c86:	23a0      	movs	r3, #160	; 0xa0
 8002c88:	05db      	lsls	r3, r3, #23
 8002c8a:	0011      	movs	r1, r2
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7fd fed9 	bl	8000a44 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c92:	230c      	movs	r3, #12
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	2208      	movs	r2, #8
 8002c98:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	18fa      	adds	r2, r7, r3
 8002c9e:	23a0      	movs	r3, #160	; 0xa0
 8002ca0:	05db      	lsls	r3, r3, #23
 8002ca2:	0011      	movs	r1, r2
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7fd fecd 	bl	8000a44 <HAL_GPIO_Init>
}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b008      	add	sp, #32
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <DAC_Init>:

void DAC_Init(){
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
	hdac.Instance = DAC;
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <DAC_Init+0x40>)
 8002cbe:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <DAC_Init+0x44>)
 8002cc0:	601a      	str	r2, [r3, #0]

	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <DAC_Init+0x40>)
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7fd fdc2 	bl	800084e <HAL_DAC_Init>
 8002cca:	1e03      	subs	r3, r0, #0
 8002ccc:	d001      	beq.n	8002cd2 <DAC_Init+0x1a>
	    Error_Handler();
 8002cce:	f000 f991 	bl	8002ff4 <Error_Handler>

	/*##-2- Configure DAC channel1 #############################################*/
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <DAC_Init+0x48>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <DAC_Init+0x48>)
 8002cda:	2202      	movs	r2, #2
 8002cdc:	605a      	str	r2, [r3, #4]

	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002cde:	4908      	ldr	r1, [pc, #32]	; (8002d00 <DAC_Init+0x48>)
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <DAC_Init+0x40>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7fd fdd5 	bl	8000894 <HAL_DAC_ConfigChannel>
 8002cea:	1e03      	subs	r3, r0, #0
 8002cec:	d001      	beq.n	8002cf2 <DAC_Init+0x3a>
	    Error_Handler();
 8002cee:	f000 f981 	bl	8002ff4 <Error_Handler>



}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	2000009c 	.word	0x2000009c
 8002cfc:	40007400 	.word	0x40007400
 8002d00:	20000020 	.word	0x20000020

08002d04 <HAL_DAC_MspInit>:
void HAL_DAC_MspInit(DAC_HandleTypeDef *hdac)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0c:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <HAL_DAC_MspInit+0x60>)
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <HAL_DAC_MspInit+0x60>)
 8002d10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d12:	2101      	movs	r1, #1
 8002d14:	430a      	orrs	r2, r1
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_DAC_MspInit+0x60>)
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	4013      	ands	r3, r2
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
  /* DAC Periph clock enable */
  __HAL_RCC_DAC_CLK_ENABLE();
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_DAC_MspInit+0x60>)
 8002d26:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <HAL_DAC_MspInit+0x60>)
 8002d28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	0589      	lsls	r1, r1, #22
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* DAC Channel1 GPIO pin configuration */
  //GPIO_InitStruct.Pin = MOTA_PWM;
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d32:	230c      	movs	r3, #12
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	2210      	movs	r2, #16
 8002d38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d3a:	230c      	movs	r3, #12
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2203      	movs	r2, #3
 8002d40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	230c      	movs	r3, #12
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  //HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4a:	230c      	movs	r3, #12
 8002d4c:	18fa      	adds	r2, r7, r3
 8002d4e:	23a0      	movs	r3, #160	; 0xa0
 8002d50:	05db      	lsls	r3, r3, #23
 8002d52:	0011      	movs	r1, r2
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7fd fe75 	bl	8000a44 <HAL_GPIO_Init>
}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b008      	add	sp, #32
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	40021000 	.word	0x40021000

08002d68 <main>:


int main(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
	HAL_Init();
 8002d6e:	f7fd fc53 	bl	8000618 <HAL_Init>
	SystemClock_Config();
 8002d72:	f000 f8db 	bl	8002f2c <SystemClock_Config>
	GPIO_Init();
 8002d76:	f7ff febd 	bl	8002af4 <GPIO_Init>
	USART2_Init();
 8002d7a:	f7ff ff27 	bl	8002bcc <USART2_Init>
	DAC_Init();
 8002d7e:	f7ff ff9b 	bl	8002cb8 <DAC_Init>
	PWM_Init();
 8002d82:	f7ff fe63 	bl	8002a4c <PWM_Init>

	//Establishes forward direction of Channel A
	HAL_GPIO_WritePin(GPIOA, MOTA_DIR , GPIO_PIN_SET);
 8002d86:	23a0      	movs	r3, #160	; 0xa0
 8002d88:	05db      	lsls	r3, r3, #23
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	2140      	movs	r1, #64	; 0x40
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f7fd ffd6 	bl	8000d40 <HAL_GPIO_WritePin>
	//Disengage the Brake for Channel A
	HAL_GPIO_WritePin(GPIOC, MOTA_BREAK , GPIO_PIN_RESET);
 8002d94:	4b5d      	ldr	r3, [pc, #372]	; (8002f0c <main+0x1a4>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	2180      	movs	r1, #128	; 0x80
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f7fd ffd0 	bl	8000d40 <HAL_GPIO_WritePin>
	}*/

	uint8_t RxBuf[3];
	while (1){

    	if (HAL_UART_Receive(&huart, RxBuf, 3, 5000) != HAL_TIMEOUT){
 8002da0:	4b5b      	ldr	r3, [pc, #364]	; (8002f10 <main+0x1a8>)
 8002da2:	1d39      	adds	r1, r7, #4
 8002da4:	485b      	ldr	r0, [pc, #364]	; (8002f14 <main+0x1ac>)
 8002da6:	2203      	movs	r2, #3
 8002da8:	f7ff f8e0 	bl	8001f6c <HAL_UART_Receive>
 8002dac:	0003      	movs	r3, r0
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d0f6      	beq.n	8002da0 <main+0x38>

    		switch(RxBuf[0]){
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d037      	beq.n	8002e2a <main+0xc2>
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d067      	beq.n	8002e8e <main+0x126>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d000      	beq.n	8002dc4 <main+0x5c>
 8002dc2:	e097      	b.n	8002ef4 <main+0x18c>
				case SET_DIR:{
					uint8_t motor 	= RxBuf[1];
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	1d3a      	adds	r2, r7, #4
 8002dca:	7852      	ldrb	r2, [r2, #1]
 8002dcc:	701a      	strb	r2, [r3, #0]
					uint8_t dir 	= RxBuf[2];
 8002dce:	230e      	movs	r3, #14
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	1d3a      	adds	r2, r7, #4
 8002dd4:	7892      	ldrb	r2, [r2, #2]
 8002dd6:	701a      	strb	r2, [r3, #0]
					if (motor == 0x00)
 8002dd8:	230f      	movs	r3, #15
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <main+0x8e>
						HAL_GPIO_WritePin(MOTA_DIR_GPIO, MOTA_DIR , dir);
 8002de2:	230e      	movs	r3, #14
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	23a0      	movs	r3, #160	; 0xa0
 8002dea:	05db      	lsls	r3, r3, #23
 8002dec:	2140      	movs	r1, #64	; 0x40
 8002dee:	0018      	movs	r0, r3
 8002df0:	f7fd ffa6 	bl	8000d40 <HAL_GPIO_WritePin>
 8002df4:	e00e      	b.n	8002e14 <main+0xac>
					else if (motor == 0x01)
 8002df6:	230f      	movs	r3, #15
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d000      	beq.n	8002e02 <main+0x9a>
 8002e00:	e07d      	b.n	8002efe <main+0x196>
						HAL_GPIO_WritePin(MOTB_DIR_GPIO, MOTB_DIR , dir);
 8002e02:	230e      	movs	r3, #14
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	23a0      	movs	r3, #160	; 0xa0
 8002e0a:	05db      	lsls	r3, r3, #23
 8002e0c:	2120      	movs	r1, #32
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7fd ff96 	bl	8000d40 <HAL_GPIO_WritePin>
					else break;
					printf ("Direction was set to %u [0 forward/1 backward] for motor %u\r\n", dir, motor);
 8002e14:	230e      	movs	r3, #14
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	7819      	ldrb	r1, [r3, #0]
 8002e1a:	230f      	movs	r3, #15
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <main+0x1b0>)
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 fad4 	bl	80033d0 <iprintf>
					break;
 8002e28:	e06e      	b.n	8002f08 <main+0x1a0>

				}
				case SET_BREAK:{
					uint8_t motor 	= RxBuf[1];
 8002e2a:	230d      	movs	r3, #13
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	1d3a      	adds	r2, r7, #4
 8002e30:	7852      	ldrb	r2, [r2, #1]
 8002e32:	701a      	strb	r2, [r3, #0]
					uint8_t br 	= RxBuf[2];
 8002e34:	230c      	movs	r3, #12
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	1d3a      	adds	r2, r7, #4
 8002e3a:	7892      	ldrb	r2, [r2, #2]
 8002e3c:	701a      	strb	r2, [r3, #0]
					if (motor == 0x00)
 8002e3e:	230d      	movs	r3, #13
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d108      	bne.n	8002e5a <main+0xf2>
						HAL_GPIO_WritePin(MOTA_BREAK_GPIO, MOTA_BREAK , br);
 8002e48:	230c      	movs	r3, #12
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	482f      	ldr	r0, [pc, #188]	; (8002f0c <main+0x1a4>)
 8002e50:	001a      	movs	r2, r3
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	f7fd ff74 	bl	8000d40 <HAL_GPIO_WritePin>
 8002e58:	e00e      	b.n	8002e78 <main+0x110>
					else if (motor == 0x01)
 8002e5a:	230d      	movs	r3, #13
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d14e      	bne.n	8002f02 <main+0x19a>
						HAL_GPIO_WritePin(MOTB_BREAK_GPIO, MOTB_BREAK , br);
 8002e64:	230c      	movs	r3, #12
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	781a      	ldrb	r2, [r3, #0]
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	0099      	lsls	r1, r3, #2
 8002e6e:	23a0      	movs	r3, #160	; 0xa0
 8002e70:	05db      	lsls	r3, r3, #23
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7fd ff64 	bl	8000d40 <HAL_GPIO_WritePin>
					else break;
					printf ("Break was set to %u [0 turn off/1 turn on] for motor %u\r\n", br, motor);
 8002e78:	230c      	movs	r3, #12
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	7819      	ldrb	r1, [r3, #0]
 8002e7e:	230d      	movs	r3, #13
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	781a      	ldrb	r2, [r3, #0]
 8002e84:	4b25      	ldr	r3, [pc, #148]	; (8002f1c <main+0x1b4>)
 8002e86:	0018      	movs	r0, r3
 8002e88:	f000 faa2 	bl	80033d0 <iprintf>
					break;
 8002e8c:	e03c      	b.n	8002f08 <main+0x1a0>
				}
				case SET_PWM:{
					uint8_t motor 	= RxBuf[1];
 8002e8e:	230b      	movs	r3, #11
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	1d3a      	adds	r2, r7, #4
 8002e94:	7852      	ldrb	r2, [r2, #1]
 8002e96:	701a      	strb	r2, [r3, #0]
					uint8_t val 	= RxBuf[2];
 8002e98:	230a      	movs	r3, #10
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	1d3a      	adds	r2, r7, #4
 8002e9e:	7892      	ldrb	r2, [r2, #2]
 8002ea0:	701a      	strb	r2, [r3, #0]
					if (motor == 0x00){
 8002ea2:	230b      	movs	r3, #11
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <main+0x152>
						//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, val);
						//HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
						TIM2-> CCR2 = val;
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	05db      	lsls	r3, r3, #23
 8002eb0:	220a      	movs	r2, #10
 8002eb2:	18ba      	adds	r2, r7, r2
 8002eb4:	7812      	ldrb	r2, [r2, #0]
 8002eb6:	639a      	str	r2, [r3, #56]	; 0x38
 8002eb8:	e011      	b.n	8002ede <main+0x176>
					}
					else if (motor == 0x01){
 8002eba:	230b      	movs	r3, #11
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d120      	bne.n	8002f06 <main+0x19e>
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_8B_R, val);
 8002ec4:	230a      	movs	r3, #10
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	4815      	ldr	r0, [pc, #84]	; (8002f20 <main+0x1b8>)
 8002ecc:	2208      	movs	r2, #8
 8002ece:	2110      	movs	r1, #16
 8002ed0:	f7fd fd95 	bl	80009fe <HAL_DAC_SetValue>
						HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <main+0x1b8>)
 8002ed6:	2110      	movs	r1, #16
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7fd fd27 	bl	800092c <HAL_DAC_Start>
					}
					else break;
					printf ("PWM value vas set to %u percent for motor %u\r\n", val, motor);
 8002ede:	230a      	movs	r3, #10
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	7819      	ldrb	r1, [r3, #0]
 8002ee4:	230b      	movs	r3, #11
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <main+0x1bc>)
 8002eec:	0018      	movs	r0, r3
 8002eee:	f000 fa6f 	bl	80033d0 <iprintf>
					break;
 8002ef2:	e009      	b.n	8002f08 <main+0x1a0>
				}
				default:
					printf("Unrecognized command\r\n");
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <main+0x1c0>)
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 faca 	bl	8003490 <puts>
 8002efc:	e750      	b.n	8002da0 <main+0x38>
					else break;
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	e74e      	b.n	8002da0 <main+0x38>
					else break;
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	e74c      	b.n	8002da0 <main+0x38>
					else break;
 8002f06:	46c0      	nop			; (mov r8, r8)
    	if (HAL_UART_Receive(&huart, RxBuf, 3, 5000) != HAL_TIMEOUT){
 8002f08:	e74a      	b.n	8002da0 <main+0x38>
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	50000800 	.word	0x50000800
 8002f10:	00001388 	.word	0x00001388
 8002f14:	2000002c 	.word	0x2000002c
 8002f18:	08003560 	.word	0x08003560
 8002f1c:	080035a0 	.word	0x080035a0
 8002f20:	2000009c 	.word	0x2000009c
 8002f24:	080035dc 	.word	0x080035dc
 8002f28:	0800360c 	.word	0x0800360c

08002f2c <SystemClock_Config>:
  *            Flash Latency(WS)              = 0
  *            Main regulator output voltage  = Scale3 mode
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b094      	sub	sp, #80	; 0x50
 8002f30:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f32:	233c      	movs	r3, #60	; 0x3c
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	0018      	movs	r0, r3
 8002f38:	2314      	movs	r3, #20
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	f000 fafb 	bl	8003538 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f42:	1d3b      	adds	r3, r7, #4
 8002f44:	0018      	movs	r0, r3
 8002f46:	2338      	movs	r3, #56	; 0x38
 8002f48:	001a      	movs	r2, r3
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	f000 faf4 	bl	8003538 <memset>
  
  /* Enable MSI Oscillator */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	2210      	movs	r2, #16
 8002f54:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f56:	1d3b      	adds	r3, r7, #4
 8002f58:	2201      	movs	r2, #1
 8002f5a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	22a0      	movs	r2, #160	; 0xa0
 8002f60:	0212      	lsls	r2, r2, #8
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.MSICalibrationValue=0x00;
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	2200      	movs	r2, #0
 8002f68:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8002f70:	1d3b      	adds	r3, r7, #4
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7fd ff02 	bl	8000d7c <HAL_RCC_OscConfig>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d000      	beq.n	8002f7e <SystemClock_Config+0x52>
  {
    /* Initialization Error */
    while(1); 
 8002f7c:	e7fe      	b.n	8002f7c <SystemClock_Config+0x50>
  }
  
  /* Select MSI as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002f7e:	233c      	movs	r3, #60	; 0x3c
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	220f      	movs	r2, #15
 8002f84:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002f86:	233c      	movs	r3, #60	; 0x3c
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f8e:	233c      	movs	r3, #60	; 0x3c
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 8002f96:	233c      	movs	r3, #60	; 0x3c
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8002f9e:	233c      	movs	r3, #60	; 0x3c
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0)!= HAL_OK)
 8002fa6:	233c      	movs	r3, #60	; 0x3c
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	2100      	movs	r1, #0
 8002fac:	0018      	movs	r0, r3
 8002fae:	f7fe fa87 	bl	80014c0 <HAL_RCC_ClockConfig>
 8002fb2:	1e03      	subs	r3, r0, #0
 8002fb4:	d000      	beq.n	8002fb8 <SystemClock_Config+0x8c>
  {
    /* Initialization Error */
    while(1); 
 8002fb6:	e7fe      	b.n	8002fb6 <SystemClock_Config+0x8a>
  }
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <SystemClock_Config+0xbc>)
 8002fba:	4a0b      	ldr	r2, [pc, #44]	; (8002fe8 <SystemClock_Config+0xbc>)
 8002fbc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	0549      	lsls	r1, r1, #21
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <SystemClock_Config+0xc0>)
 8002fc8:	4a08      	ldr	r2, [pc, #32]	; (8002fec <SystemClock_Config+0xc0>)
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	21c0      	movs	r1, #192	; 0xc0
 8002fce:	0149      	lsls	r1, r1, #5
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]
  
  /* Disable Power Control clock */
  __HAL_RCC_PWR_CLK_DISABLE();
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <SystemClock_Config+0xbc>)
 8002fd6:	4a04      	ldr	r2, [pc, #16]	; (8002fe8 <SystemClock_Config+0xbc>)
 8002fd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fda:	4905      	ldr	r1, [pc, #20]	; (8002ff0 <SystemClock_Config+0xc4>)
 8002fdc:	400a      	ands	r2, r1
 8002fde:	639a      	str	r2, [r3, #56]	; 0x38
  
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b014      	add	sp, #80	; 0x50
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	efffffff 	.word	0xefffffff

08002ff4 <Error_Handler>:

static void Error_Handler(void){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
	while (1){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002ff8:	23a0      	movs	r3, #160	; 0xa0
 8002ffa:	05db      	lsls	r3, r3, #23
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	2120      	movs	r1, #32
 8003000:	0018      	movs	r0, r3
 8003002:	f7fd fe9d 	bl	8000d40 <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 8003006:	2064      	movs	r0, #100	; 0x64
 8003008:	f7fd fb54 	bl	80006b4 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800300c:	23a0      	movs	r3, #160	; 0xa0
 800300e:	05db      	lsls	r3, r3, #23
 8003010:	2200      	movs	r2, #0
 8003012:	2120      	movs	r1, #32
 8003014:	0018      	movs	r0, r3
 8003016:	f7fd fe93 	bl	8000d40 <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 800301a:	2064      	movs	r0, #100	; 0x64
 800301c:	f7fd fb4a 	bl	80006b4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003020:	e7ea      	b.n	8002ff8 <Error_Handler+0x4>
	...

08003024 <_write>:
	  }
}

int _write(int file, char *data, int len)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]

   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d005      	beq.n	8003042 <_write+0x1e>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d002      	beq.n	8003042 <_write+0x1e>
      return -1;
 800303c:	2301      	movs	r3, #1
 800303e:	425b      	negs	r3, r3
 8003040:	e007      	b.n	8003052 <_write+0x2e>

   HAL_UART_Transmit(&huart, (uint8_t*)data, len, 5000);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	b29a      	uxth	r2, r3
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <_write+0x38>)
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	4805      	ldr	r0, [pc, #20]	; (8003060 <_write+0x3c>)
 800304c:	f7fe feed 	bl	8001e2a <HAL_UART_Transmit>
   return len;
 8003050:	687b      	ldr	r3, [r7, #4]
}
 8003052:	0018      	movs	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	b004      	add	sp, #16
 8003058:	bd80      	pop	{r7, pc}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	00001388 	.word	0x00001388
 8003060:	2000002c 	.word	0x2000002c

08003064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003064:	480d      	ldr	r0, [pc, #52]	; (800309c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003066:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003068:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800306a:	e003      	b.n	8003074 <LoopCopyDataInit>

0800306c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800306e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003070:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003072:	3104      	adds	r1, #4

08003074 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003074:	480b      	ldr	r0, [pc, #44]	; (80030a4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003078:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800307a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800307c:	d3f6      	bcc.n	800306c <CopyDataInit>
  ldr  r2, =_sbss
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <LoopForever+0x12>)
  b  LoopFillZerobss
 8003080:	e002      	b.n	8003088 <LoopFillZerobss>

08003082 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003082:	2300      	movs	r3, #0
  str  r3, [r2]
 8003084:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003086:	3204      	adds	r2, #4

08003088 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <LoopForever+0x16>)
  cmp  r2, r3
 800308a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800308c:	d3f9      	bcc.n	8003082 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800308e:	f000 f82b 	bl	80030e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003092:	f000 fa2d 	bl	80034f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003096:	f7ff fe67 	bl	8002d68 <main>

0800309a <LoopForever>:

LoopForever:
    b LoopForever
 800309a:	e7fe      	b.n	800309a <LoopForever>
   ldr   r0, =_estack
 800309c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80030a0:	08003728 	.word	0x08003728
  ldr  r0, =_sdata
 80030a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030a8:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80030ac:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80030b0:	200000b0 	.word	0x200000b0

080030b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b4:	e7fe      	b.n	80030b4 <ADC1_COMP_IRQHandler>

080030b6 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	af00      	add	r7, sp, #0
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <HardFault_Handler+0x4>

080030c6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	af00      	add	r7, sp, #0
}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80030de:	f7fd fad3 	bl	8000688 <HAL_IncTick>
}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80030ec:	4b17      	ldr	r3, [pc, #92]	; (800314c <SystemInit+0x64>)
 80030ee:	4a17      	ldr	r2, [pc, #92]	; (800314c <SystemInit+0x64>)
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	2180      	movs	r1, #128	; 0x80
 80030f4:	0049      	lsls	r1, r1, #1
 80030f6:	430a      	orrs	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80030fa:	4b14      	ldr	r3, [pc, #80]	; (800314c <SystemInit+0x64>)
 80030fc:	4a13      	ldr	r2, [pc, #76]	; (800314c <SystemInit+0x64>)
 80030fe:	68d2      	ldr	r2, [r2, #12]
 8003100:	4913      	ldr	r1, [pc, #76]	; (8003150 <SystemInit+0x68>)
 8003102:	400a      	ands	r2, r1
 8003104:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <SystemInit+0x64>)
 8003108:	4a10      	ldr	r2, [pc, #64]	; (800314c <SystemInit+0x64>)
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	4911      	ldr	r1, [pc, #68]	; (8003154 <SystemInit+0x6c>)
 800310e:	400a      	ands	r2, r1
 8003110:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <SystemInit+0x64>)
 8003114:	4a0d      	ldr	r2, [pc, #52]	; (800314c <SystemInit+0x64>)
 8003116:	6892      	ldr	r2, [r2, #8]
 8003118:	2101      	movs	r1, #1
 800311a:	438a      	bics	r2, r1
 800311c:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <SystemInit+0x64>)
 8003120:	4a0a      	ldr	r2, [pc, #40]	; (800314c <SystemInit+0x64>)
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	490c      	ldr	r1, [pc, #48]	; (8003158 <SystemInit+0x70>)
 8003126:	400a      	ands	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800312a:	4b08      	ldr	r3, [pc, #32]	; (800314c <SystemInit+0x64>)
 800312c:	4a07      	ldr	r2, [pc, #28]	; (800314c <SystemInit+0x64>)
 800312e:	68d2      	ldr	r2, [r2, #12]
 8003130:	490a      	ldr	r1, [pc, #40]	; (800315c <SystemInit+0x74>)
 8003132:	400a      	ands	r2, r1
 8003134:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <SystemInit+0x64>)
 8003138:	2200      	movs	r2, #0
 800313a:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800313c:	4b08      	ldr	r3, [pc, #32]	; (8003160 <SystemInit+0x78>)
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	0512      	lsls	r2, r2, #20
 8003142:	609a      	str	r2, [r3, #8]
#endif
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	40021000 	.word	0x40021000
 8003150:	88ff400c 	.word	0x88ff400c
 8003154:	fef6fff6 	.word	0xfef6fff6
 8003158:	fffbffff 	.word	0xfffbffff
 800315c:	ff02ffff 	.word	0xff02ffff
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003170:	2301      	movs	r3, #1
 8003172:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003174:	e003      	b.n	800317e <ts_itoa+0x1a>
		div *= base;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4353      	muls	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	0019      	movs	r1, r3
 8003182:	68b8      	ldr	r0, [r7, #8]
 8003184:	f7fc ffc8 	bl	8000118 <__udivsi3>
 8003188:	0003      	movs	r3, r0
 800318a:	001a      	movs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d2f1      	bcs.n	8003176 <ts_itoa+0x12>

	while (div != 0)
 8003192:	e02c      	b.n	80031ee <ts_itoa+0x8a>
	{
		int num = d/div;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	0019      	movs	r1, r3
 8003198:	68b8      	ldr	r0, [r7, #8]
 800319a:	f7fc ffbd 	bl	8000118 <__udivsi3>
 800319e:	0003      	movs	r3, r0
 80031a0:	613b      	str	r3, [r7, #16]
		d = d%div;
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	0011      	movs	r1, r2
 80031a8:	0018      	movs	r0, r3
 80031aa:	f7fd f83b 	bl	8000224 <__aeabi_uidivmod>
 80031ae:	000b      	movs	r3, r1
 80031b0:	60bb      	str	r3, [r7, #8]
		div /= base;
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	6978      	ldr	r0, [r7, #20]
 80031b6:	f7fd f839 	bl	800022c <__divsi3>
 80031ba:	0003      	movs	r3, r0
 80031bc:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b09      	cmp	r3, #9
 80031c2:	dd0a      	ble.n	80031da <ts_itoa+0x76>
			*((*buf)++) = (num-10) + 'A';
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	1c59      	adds	r1, r3, #1
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	6011      	str	r1, [r2, #0]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	3237      	adds	r2, #55	; 0x37
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	e009      	b.n	80031ee <ts_itoa+0x8a>
		else
			*((*buf)++) = num + '0';
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	1c59      	adds	r1, r3, #1
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	6011      	str	r1, [r2, #0]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	3230      	adds	r2, #48	; 0x30
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1cf      	bne.n	8003194 <ts_itoa+0x30>
	}
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b006      	add	sp, #24
 80031fa:	bd80      	pop	{r7, pc}

080031fc <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800320c:	e07c      	b.n	8003308 <ts_formatstring+0x10c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b25      	cmp	r3, #37	; 0x25
 8003214:	d000      	beq.n	8003218 <ts_formatstring+0x1c>
 8003216:	e06f      	b.n	80032f8 <ts_formatstring+0xfc>
		{
			switch (*(++fmt))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	3301      	adds	r3, #1
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d01c      	beq.n	8003260 <ts_formatstring+0x64>
 8003226:	dc06      	bgt.n	8003236 <ts_formatstring+0x3a>
 8003228:	2b58      	cmp	r3, #88	; 0x58
 800322a:	d04f      	beq.n	80032cc <ts_formatstring+0xd0>
 800322c:	2b63      	cmp	r3, #99	; 0x63
 800322e:	d00d      	beq.n	800324c <ts_formatstring+0x50>
 8003230:	2b25      	cmp	r3, #37	; 0x25
 8003232:	d057      	beq.n	80032e4 <ts_formatstring+0xe8>
 8003234:	e05c      	b.n	80032f0 <ts_formatstring+0xf4>
 8003236:	2b73      	cmp	r3, #115	; 0x73
 8003238:	d02a      	beq.n	8003290 <ts_formatstring+0x94>
 800323a:	dc02      	bgt.n	8003242 <ts_formatstring+0x46>
 800323c:	2b69      	cmp	r3, #105	; 0x69
 800323e:	d00f      	beq.n	8003260 <ts_formatstring+0x64>
 8003240:	e056      	b.n	80032f0 <ts_formatstring+0xf4>
 8003242:	2b75      	cmp	r3, #117	; 0x75
 8003244:	d037      	beq.n	80032b6 <ts_formatstring+0xba>
 8003246:	2b78      	cmp	r3, #120	; 0x78
 8003248:	d040      	beq.n	80032cc <ts_formatstring+0xd0>
 800324a:	e051      	b.n	80032f0 <ts_formatstring+0xf4>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	1c53      	adds	r3, r2, #1
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	1d19      	adds	r1, r3, #4
 8003256:	6079      	str	r1, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	7013      	strb	r3, [r2, #0]
				break;
 800325e:	e047      	b.n	80032f0 <ts_formatstring+0xf4>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	1d1a      	adds	r2, r3, #4
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	da07      	bge.n	8003280 <ts_formatstring+0x84>
					{
						val *= -1;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	425b      	negs	r3, r3
 8003274:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	60fa      	str	r2, [r7, #12]
 800327c:	222d      	movs	r2, #45	; 0x2d
 800327e:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003280:	69f9      	ldr	r1, [r7, #28]
 8003282:	230c      	movs	r3, #12
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	220a      	movs	r2, #10
 8003288:	0018      	movs	r0, r3
 800328a:	f7ff ff6b 	bl	8003164 <ts_itoa>
				}
				break;
 800328e:	e02f      	b.n	80032f0 <ts_formatstring+0xf4>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	1d1a      	adds	r2, r3, #4
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800329a:	e007      	b.n	80032ac <ts_formatstring+0xb0>
					{
						*buf++ = *arg++;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	60fa      	str	r2, [r7, #12]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	1c51      	adds	r1, r2, #1
 80032a6:	61b9      	str	r1, [r7, #24]
 80032a8:	7812      	ldrb	r2, [r2, #0]
 80032aa:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f3      	bne.n	800329c <ts_formatstring+0xa0>
					}
				}
				break;
 80032b4:	e01c      	b.n	80032f0 <ts_formatstring+0xf4>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	1d1a      	adds	r2, r3, #4
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	230c      	movs	r3, #12
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	220a      	movs	r2, #10
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff ff4d 	bl	8003164 <ts_itoa>
				break;
 80032ca:	e011      	b.n	80032f0 <ts_formatstring+0xf4>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	1d1a      	adds	r2, r3, #4
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	0019      	movs	r1, r3
 80032d6:	230c      	movs	r3, #12
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2210      	movs	r2, #16
 80032dc:	0018      	movs	r0, r3
 80032de:	f7ff ff41 	bl	8003164 <ts_itoa>
				break;
 80032e2:	e005      	b.n	80032f0 <ts_formatstring+0xf4>
			  case '%':
				  *buf++ = '%';
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	60fa      	str	r2, [r7, #12]
 80032ea:	2225      	movs	r2, #37	; 0x25
 80032ec:	701a      	strb	r2, [r3, #0]
				  break;
 80032ee:	46c0      	nop			; (mov r8, r8)
			}
			fmt++;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	3301      	adds	r3, #1
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	e007      	b.n	8003308 <ts_formatstring+0x10c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	60fa      	str	r2, [r7, #12]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	1c51      	adds	r1, r2, #1
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	7812      	ldrb	r2, [r2, #0]
 8003306:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d000      	beq.n	8003312 <ts_formatstring+0x116>
 8003310:	e77d      	b.n	800320e <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	001a      	movs	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	1ad3      	subs	r3, r2, r3
}
 8003320:	0018      	movs	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	b008      	add	sp, #32
 8003326:	bd80      	pop	{r7, pc}

08003328 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
	int length = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8003336:	e040      	b.n	80033ba <ts_formatlength+0x92>
	{
		if (*fmt == '%')
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b25      	cmp	r3, #37	; 0x25
 800333e:	d136      	bne.n	80033ae <ts_formatlength+0x86>
		{
			++fmt;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3301      	adds	r3, #1
 8003344:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	3b58      	subs	r3, #88	; 0x58
 800334c:	2b20      	cmp	r3, #32
 800334e:	d829      	bhi.n	80033a4 <ts_formatlength+0x7c>
 8003350:	009a      	lsls	r2, r3, #2
 8003352:	4b1e      	ldr	r3, [pc, #120]	; (80033cc <ts_formatlength+0xa4>)
 8003354:	18d3      	adds	r3, r2, r3
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	469f      	mov	pc, r3
			{
			  case 'c':
		  		  va_arg(va, int);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	3304      	adds	r3, #4
 800335e:	603b      	str	r3, [r7, #0]
				  ++length;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3301      	adds	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
				  break;
 8003366:	e025      	b.n	80033b4 <ts_formatlength+0x8c>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	330b      	adds	r3, #11
 800336c:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	3304      	adds	r3, #4
 8003372:	603b      	str	r3, [r7, #0]
				  break;
 8003374:	e01e      	b.n	80033b4 <ts_formatlength+0x8c>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	1d1a      	adds	r2, r3, #4
 800337a:	603a      	str	r2, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8003380:	e002      	b.n	8003388 <ts_formatlength+0x60>
			  			  ++length;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3301      	adds	r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	60ba      	str	r2, [r7, #8]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f6      	bne.n	8003382 <ts_formatlength+0x5a>
			  	  }
				  break;
 8003394:	e00e      	b.n	80033b4 <ts_formatlength+0x8c>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3308      	adds	r3, #8
 800339a:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	3304      	adds	r3, #4
 80033a0:	603b      	str	r3, [r7, #0]
				  break;
 80033a2:	e007      	b.n	80033b4 <ts_formatlength+0x8c>
			  default:
				  ++length;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3301      	adds	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
				  break;
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	e002      	b.n	80033b4 <ts_formatlength+0x8c>
			}
		}
		else
		{
			++length;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3301      	adds	r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3301      	adds	r3, #1
 80033b8:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ba      	bne.n	8003338 <ts_formatlength+0x10>
	}
	return length;
 80033c2:	68fb      	ldr	r3, [r7, #12]
}
 80033c4:	0018      	movs	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b004      	add	sp, #16
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	08003694 	.word	0x08003694

080033d0 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 80033d0:	b40f      	push	{r0, r1, r2, r3}
 80033d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d4:	b08d      	sub	sp, #52	; 0x34
 80033d6:	af00      	add	r7, sp, #0
	int length = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
	va_list va;
	va_start(va, fmt);
 80033dc:	232c      	movs	r3, #44	; 0x2c
 80033de:	2220      	movs	r2, #32
 80033e0:	4694      	mov	ip, r2
 80033e2:	44bc      	add	ip, r7
 80033e4:	4463      	add	r3, ip
 80033e6:	623b      	str	r3, [r7, #32]
	length = ts_formatlength(fmt, va);
 80033e8:	6a3a      	ldr	r2, [r7, #32]
 80033ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ec:	0011      	movs	r1, r2
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7ff ff9a 	bl	8003328 <ts_formatlength>
 80033f4:	0003      	movs	r3, r0
 80033f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	va_end(va);
	{
 80033f8:	466b      	mov	r3, sp
 80033fa:	607b      	str	r3, [r7, #4]
		char buf[length];
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	1e5a      	subs	r2, r3, #1
 8003400:	62ba      	str	r2, [r7, #40]	; 0x28
 8003402:	001a      	movs	r2, r3
 8003404:	613a      	str	r2, [r7, #16]
 8003406:	2200      	movs	r2, #0
 8003408:	617a      	str	r2, [r7, #20]
 800340a:	6938      	ldr	r0, [r7, #16]
 800340c:	6979      	ldr	r1, [r7, #20]
 800340e:	0002      	movs	r2, r0
 8003410:	0f52      	lsrs	r2, r2, #29
 8003412:	000e      	movs	r6, r1
 8003414:	00f6      	lsls	r6, r6, #3
 8003416:	61fe      	str	r6, [r7, #28]
 8003418:	69fe      	ldr	r6, [r7, #28]
 800341a:	4316      	orrs	r6, r2
 800341c:	61fe      	str	r6, [r7, #28]
 800341e:	0002      	movs	r2, r0
 8003420:	00d2      	lsls	r2, r2, #3
 8003422:	61ba      	str	r2, [r7, #24]
 8003424:	001a      	movs	r2, r3
 8003426:	60ba      	str	r2, [r7, #8]
 8003428:	2200      	movs	r2, #0
 800342a:	60fa      	str	r2, [r7, #12]
 800342c:	68b8      	ldr	r0, [r7, #8]
 800342e:	68f9      	ldr	r1, [r7, #12]
 8003430:	0002      	movs	r2, r0
 8003432:	0f52      	lsrs	r2, r2, #29
 8003434:	000e      	movs	r6, r1
 8003436:	00f5      	lsls	r5, r6, #3
 8003438:	4315      	orrs	r5, r2
 800343a:	0002      	movs	r2, r0
 800343c:	00d4      	lsls	r4, r2, #3
 800343e:	3307      	adds	r3, #7
 8003440:	08db      	lsrs	r3, r3, #3
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	466a      	mov	r2, sp
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	469d      	mov	sp, r3
 800344a:	466b      	mov	r3, sp
 800344c:	3300      	adds	r3, #0
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
		va_start(va, fmt);
 8003450:	232c      	movs	r3, #44	; 0x2c
 8003452:	2220      	movs	r2, #32
 8003454:	4694      	mov	ip, r2
 8003456:	44bc      	add	ip, r7
 8003458:	4463      	add	r3, ip
 800345a:	623b      	str	r3, [r7, #32]
		length = ts_formatstring(buf, fmt, va);
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	6a3a      	ldr	r2, [r7, #32]
 8003460:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003462:	0018      	movs	r0, r3
 8003464:	f7ff feca 	bl	80031fc <ts_formatstring>
 8003468:	0003      	movs	r3, r0
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
		length = _write(1, buf, length);
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003470:	0019      	movs	r1, r3
 8003472:	2001      	movs	r0, #1
 8003474:	f7ff fdd6 	bl	8003024 <_write>
 8003478:	0003      	movs	r3, r0
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	469d      	mov	sp, r3
		va_end(va);
	}
	return length;
 8003480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	b00d      	add	sp, #52	; 0x34
 8003488:	bcf0      	pop	{r4, r5, r6, r7}
 800348a:	bc08      	pop	{r3}
 800348c:	b004      	add	sp, #16
 800348e:	4718      	bx	r3

08003490 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	0018      	movs	r0, r3
 800349c:	f7fc fe34 	bl	8000108 <strlen>
 80034a0:	0003      	movs	r3, r0
 80034a2:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0019      	movs	r1, r3
 80034ae:	2001      	movs	r0, #1
 80034b0:	f7ff fdb8 	bl	8003024 <_write>
 80034b4:	0003      	movs	r3, r0
 80034b6:	60fb      	str	r3, [r7, #12]
	numbytes += _write(1, "\n", 1);
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <puts+0x5c>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	0019      	movs	r1, r3
 80034be:	2001      	movs	r0, #1
 80034c0:	f7ff fdb0 	bl	8003024 <_write>
 80034c4:	0002      	movs	r2, r0
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	189b      	adds	r3, r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d102      	bne.n	80034dc <puts+0x4c>
	{
		res = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e002      	b.n	80034e2 <puts+0x52>
	}
	else
	{
		res = EOF;
 80034dc:	2301      	movs	r3, #1
 80034de:	425b      	negs	r3, r3
 80034e0:	617b      	str	r3, [r7, #20]
	}

	return res;
 80034e2:	697b      	ldr	r3, [r7, #20]
}
 80034e4:	0018      	movs	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b006      	add	sp, #24
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	08003624 	.word	0x08003624

080034f0 <__libc_init_array>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	2600      	movs	r6, #0
 80034f4:	4d0c      	ldr	r5, [pc, #48]	; (8003528 <__libc_init_array+0x38>)
 80034f6:	4c0d      	ldr	r4, [pc, #52]	; (800352c <__libc_init_array+0x3c>)
 80034f8:	1b64      	subs	r4, r4, r5
 80034fa:	10a4      	asrs	r4, r4, #2
 80034fc:	42a6      	cmp	r6, r4
 80034fe:	d109      	bne.n	8003514 <__libc_init_array+0x24>
 8003500:	2600      	movs	r6, #0
 8003502:	f000 f821 	bl	8003548 <_init>
 8003506:	4d0a      	ldr	r5, [pc, #40]	; (8003530 <__libc_init_array+0x40>)
 8003508:	4c0a      	ldr	r4, [pc, #40]	; (8003534 <__libc_init_array+0x44>)
 800350a:	1b64      	subs	r4, r4, r5
 800350c:	10a4      	asrs	r4, r4, #2
 800350e:	42a6      	cmp	r6, r4
 8003510:	d105      	bne.n	800351e <__libc_init_array+0x2e>
 8003512:	bd70      	pop	{r4, r5, r6, pc}
 8003514:	00b3      	lsls	r3, r6, #2
 8003516:	58eb      	ldr	r3, [r5, r3]
 8003518:	4798      	blx	r3
 800351a:	3601      	adds	r6, #1
 800351c:	e7ee      	b.n	80034fc <__libc_init_array+0xc>
 800351e:	00b3      	lsls	r3, r6, #2
 8003520:	58eb      	ldr	r3, [r5, r3]
 8003522:	4798      	blx	r3
 8003524:	3601      	adds	r6, #1
 8003526:	e7f2      	b.n	800350e <__libc_init_array+0x1e>
 8003528:	08003720 	.word	0x08003720
 800352c:	08003720 	.word	0x08003720
 8003530:	08003720 	.word	0x08003720
 8003534:	08003724 	.word	0x08003724

08003538 <memset>:
 8003538:	0003      	movs	r3, r0
 800353a:	1882      	adds	r2, r0, r2
 800353c:	4293      	cmp	r3, r2
 800353e:	d100      	bne.n	8003542 <memset+0xa>
 8003540:	4770      	bx	lr
 8003542:	7019      	strb	r1, [r3, #0]
 8003544:	3301      	adds	r3, #1
 8003546:	e7f9      	b.n	800353c <memset+0x4>

08003548 <_init>:
 8003548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354e:	bc08      	pop	{r3}
 8003550:	469e      	mov	lr, r3
 8003552:	4770      	bx	lr

08003554 <_fini>:
 8003554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800355a:	bc08      	pop	{r3}
 800355c:	469e      	mov	lr, r3
 800355e:	4770      	bx	lr
